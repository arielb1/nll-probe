{"message":"cannot assign to data in a captured outer variable in an `Fn` closure (Ast)","code":{"code":"E0387","explanation":"\nThis error occurs when an attempt is made to mutate or mutably reference data\nthat a closure has captured immutably. Examples of this error are shown below:\n\n```compile_fail,E0387\n// Accepts a function or a closure that captures its environment immutably.\n// Closures passed to foo will not be able to mutate their closed-over state.\nfn foo<F: Fn()>(f: F) { }\n\n// Attempts to mutate closed-over data. Error message reads:\n// `cannot assign to data in a captured outer variable...`\nfn mutable() {\n    let mut x = 0u32;\n    foo(|| x = 2);\n}\n\n// Attempts to take a mutable reference to closed-over data.  Error message\n// reads: `cannot borrow data mutably in a captured outer variable...`\nfn mut_addr() {\n    let mut x = 0u32;\n    foo(|| { let y = &mut x; });\n}\n```\n\nThe problem here is that foo is defined as accepting a parameter of type `Fn`.\nClosures passed into foo will thus be inferred to be of type `Fn`, meaning that\nthey capture their context immutably.\n\nIf the definition of `foo` is under your control, the simplest solution is to\ncapture the data mutably. This can be done by defining `foo` to take FnMut\nrather than Fn:\n\n```\nfn foo<F: FnMut()>(f: F) { }\n```\n\nAlternatively, we can consider using the `Cell` and `RefCell` types to achieve\ninterior mutability through a shared reference. Our example's `mutable`\nfunction could be redefined as below:\n\n```\nuse std::cell::Cell;\n\nfn foo<F: Fn()>(f: F) { }\n\nfn mutable() {\n    let x = Cell::new(0u32);\n    foo(|| x.set(2));\n}\n```\n\nYou can read more about cell types in the API documentation:\n\nhttps://doc.rust-lang.org/std/cell/\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-immutable-upvar-mutation.rs","byte_start":801,"byte_end":807,"line_start":25,"line_end":25,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"        let _f = to_fn(|| x = 42); //~ ERROR cannot assign","highlight_start":27,"highlight_end":33}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[{"message":"consider changing this closure to take self by mutable reference","code":null,"level":"help","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-immutable-upvar-mutation.rs","byte_start":798,"byte_end":807,"line_start":25,"line_end":25,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"        let _f = to_fn(|| x = 42); //~ ERROR cannot assign","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}],"rendered":null}
{"message":"cannot borrow data mutably in a captured outer variable in an `Fn` closure (Ast)","code":{"code":"E0387","explanation":"\nThis error occurs when an attempt is made to mutate or mutably reference data\nthat a closure has captured immutably. Examples of this error are shown below:\n\n```compile_fail,E0387\n// Accepts a function or a closure that captures its environment immutably.\n// Closures passed to foo will not be able to mutate their closed-over state.\nfn foo<F: Fn()>(f: F) { }\n\n// Attempts to mutate closed-over data. Error message reads:\n// `cannot assign to data in a captured outer variable...`\nfn mutable() {\n    let mut x = 0u32;\n    foo(|| x = 2);\n}\n\n// Attempts to take a mutable reference to closed-over data.  Error message\n// reads: `cannot borrow data mutably in a captured outer variable...`\nfn mut_addr() {\n    let mut x = 0u32;\n    foo(|| { let y = &mut x; });\n}\n```\n\nThe problem here is that foo is defined as accepting a parameter of type `Fn`.\nClosures passed into foo will thus be inferred to be of type `Fn`, meaning that\nthey capture their context immutably.\n\nIf the definition of `foo` is under your control, the simplest solution is to\ncapture the data mutably. This can be done by defining `foo` to take FnMut\nrather than Fn:\n\n```\nfn foo<F: FnMut()>(f: F) { }\n```\n\nAlternatively, we can consider using the `Cell` and `RefCell` types to achieve\ninterior mutability through a shared reference. Our example's `mutable`\nfunction could be redefined as below:\n\n```\nuse std::cell::Cell;\n\nfn foo<F: Fn()>(f: F) { }\n\nfn mutable() {\n    let x = Cell::new(0u32);\n    foo(|| x.set(2));\n}\n```\n\nYou can read more about cell types in the API documentation:\n\nhttps://doc.rust-lang.org/std/cell/\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-immutable-upvar-mutation.rs","byte_start":893,"byte_end":894,"line_start":28,"line_end":28,"column_start":36,"column_end":37,"is_primary":true,"text":[{"text":"        let _g = to_fn(|| set(&mut y)); //~ ERROR cannot borrow","highlight_start":36,"highlight_end":37}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[{"message":"consider changing this closure to take self by mutable reference","code":null,"level":"help","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-immutable-upvar-mutation.rs","byte_start":881,"byte_end":895,"line_start":28,"line_end":28,"column_start":24,"column_end":38,"is_primary":true,"text":[{"text":"        let _g = to_fn(|| set(&mut y)); //~ ERROR cannot borrow","highlight_start":24,"highlight_end":38}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}],"rendered":null}
{"message":"cannot assign to data in a captured outer variable in an `Fn` closure (Ast)","code":{"code":"E0387","explanation":"\nThis error occurs when an attempt is made to mutate or mutably reference data\nthat a closure has captured immutably. Examples of this error are shown below:\n\n```compile_fail,E0387\n// Accepts a function or a closure that captures its environment immutably.\n// Closures passed to foo will not be able to mutate their closed-over state.\nfn foo<F: Fn()>(f: F) { }\n\n// Attempts to mutate closed-over data. Error message reads:\n// `cannot assign to data in a captured outer variable...`\nfn mutable() {\n    let mut x = 0u32;\n    foo(|| x = 2);\n}\n\n// Attempts to take a mutable reference to closed-over data.  Error message\n// reads: `cannot borrow data mutably in a captured outer variable...`\nfn mut_addr() {\n    let mut x = 0u32;\n    foo(|| { let y = &mut x; });\n}\n```\n\nThe problem here is that foo is defined as accepting a parameter of type `Fn`.\nClosures passed into foo will thus be inferred to be of type `Fn`, meaning that\nthey capture their context immutably.\n\nIf the definition of `foo` is under your control, the simplest solution is to\ncapture the data mutably. This can be done by defining `foo` to take FnMut\nrather than Fn:\n\n```\nfn foo<F: FnMut()>(f: F) { }\n```\n\nAlternatively, we can consider using the `Cell` and `RefCell` types to achieve\ninterior mutability through a shared reference. Our example's `mutable`\nfunction could be redefined as below:\n\n```\nuse std::cell::Cell;\n\nfn foo<F: Fn()>(f: F) { }\n\nfn mutable() {\n    let x = Cell::new(0u32);\n    foo(|| x.set(2));\n}\n```\n\nYou can read more about cell types in the API documentation:\n\nhttps://doc.rust-lang.org/std/cell/\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-immutable-upvar-mutation.rs","byte_start":1000,"byte_end":1006,"line_start":31,"line_end":31,"column_start":55,"column_end":61,"is_primary":true,"text":[{"text":"        let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); }); //~ ERROR cannot assign","highlight_start":55,"highlight_end":61}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[{"message":"consider changing this closure to take self by mutable reference","code":null,"level":"help","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-immutable-upvar-mutation.rs","byte_start":997,"byte_end":1006,"line_start":31,"line_end":31,"column_start":52,"column_end":61,"is_primary":true,"text":[{"text":"        let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); }); //~ ERROR cannot assign","highlight_start":52,"highlight_end":61}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}],"rendered":null}
{"message":"cannot assign to captured outer variable in an `Fn` closure (Ast)","code":{"code":"E0594","explanation":null},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-immutable-upvar-mutation.rs","byte_start":1129,"byte_end":1135,"line_start":37,"line_end":37,"column_start":32,"column_end":38,"is_primary":true,"text":[{"text":"        let _f = to_fn(move || x = 42); //~ ERROR cannot assign","highlight_start":32,"highlight_end":38}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[{"message":"consider changing this closure to take self by mutable reference","code":null,"level":"help","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-immutable-upvar-mutation.rs","byte_start":1121,"byte_end":1135,"line_start":37,"line_end":37,"column_start":24,"column_end":38,"is_primary":true,"text":[{"text":"        let _f = to_fn(move || x = 42); //~ ERROR cannot assign","highlight_start":24,"highlight_end":38}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider making `mut x` mutable","code":null,"level":"help","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-immutable-upvar-mutation.rs","byte_start":1087,"byte_end":1092,"line_start":36,"line_end":36,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"        let mut x = 0;","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":"mut mut x","expansion":null}],"children":[],"rendered":null}],"rendered":null}
{"message":"cannot borrow captured outer variable in an `Fn` closure as mutable (Ast)","code":{"code":"E0596","explanation":"\nThis error occurs because you tried to mutably borrow a non-mutable variable.\n\nExample of erroneous code:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-immutable-upvar-mutation.rs","byte_start":1226,"byte_end":1227,"line_start":40,"line_end":40,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"        let _g = to_fn(move || set(&mut y)); //~ ERROR cannot borrow","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[{"message":"consider changing this closure to take self by mutable reference","code":null,"level":"help","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-immutable-upvar-mutation.rs","byte_start":1209,"byte_end":1228,"line_start":40,"line_end":40,"column_start":24,"column_end":43,"is_primary":true,"text":[{"text":"        let _g = to_fn(move || set(&mut y)); //~ ERROR cannot borrow","highlight_start":24,"highlight_end":43}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}],"rendered":null}
{"message":"cannot assign to captured outer variable in an `Fn` closure (Ast)","code":{"code":"E0594","explanation":null},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-immutable-upvar-mutation.rs","byte_start":1343,"byte_end":1349,"line_start":43,"line_end":43,"column_start":65,"column_end":71,"is_primary":true,"text":[{"text":"        let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); }); //~ ERROR cannot assign","highlight_start":65,"highlight_end":71}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[{"message":"consider changing this closure to take self by mutable reference","code":null,"level":"help","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-immutable-upvar-mutation.rs","byte_start":1335,"byte_end":1349,"line_start":43,"line_end":43,"column_start":57,"column_end":71,"is_primary":true,"text":[{"text":"        let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); }); //~ ERROR cannot assign","highlight_start":57,"highlight_end":71}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider making `mut z` mutable","code":null,"level":"help","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-immutable-upvar-mutation.rs","byte_start":1268,"byte_end":1273,"line_start":42,"line_end":42,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"        let mut z = 0;","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":"mut mut z","expansion":null}],"children":[],"rendered":null}],"rendered":null}
{"message":"/home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:1607: End-user description not implemented for field access on `TyClosure(DefId { krate: CrateNum(0), index: DefIndex(1:14) => borrow_immutable_upvar_mutation[317d]::main[0]::{{closure}}[1] }, ClosureSubsts { substs: Slice([&mut usize]) })`","code":null,"level":"error: internal compiler error","spans":[],"children":[],"rendered":null}
note: the compiler unexpectedly panicked. this is a bug.

note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports

note: rustc 1.23.0-dev running on x86_64-unknown-linux-gnu

note: run with `RUST_BACKTRACE=1` for a backtrace

thread 'rustc' panicked at 'Box<Any>', /home/ariel/Rust/rust-master/src/librustc_errors/lib.rs:485:8
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
stack backtrace:
   0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace
             at /home/ariel/Rust/rust-master/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1: std::sys_common::backtrace::_print
             at /home/ariel/Rust/rust-master/src/libstd/sys_common/backtrace.rs:68
   2: std::panicking::default_hook::{{closure}}
             at /home/ariel/Rust/rust-master/src/libstd/sys_common/backtrace.rs:57
             at /home/ariel/Rust/rust-master/src/libstd/panicking.rs:381
   3: std::panicking::default_hook
             at /home/ariel/Rust/rust-master/src/libstd/panicking.rs:391
   4: std::panicking::rust_panic_with_hook
             at /home/ariel/Rust/rust-master/src/libstd/panicking.rs:577
   5: std::panicking::begin_panic
             at /home/ariel/Rust/rust-master/src/libstd/panicking.rs:538
   6: rustc_errors::Handler::bug
             at /home/ariel/Rust/rust-master/src/librustc_errors/lib.rs:485
   7: rustc::session::opt_span_bug_fmt::{{closure}}
             at /home/ariel/Rust/rust-master/src/librustc/session/mod.rs:992
   8: rustc::session::opt_span_bug_fmt
             at /home/ariel/Rust/rust-master/src/librustc/ty/context.rs:0
   9: rustc::session::bug_fmt
             at /home/ariel/Rust/rust-master/src/librustc/session/mod.rs:972
  10: rustc_mir::borrow_check::MirBorrowckCtxt::describe_field_from_ty
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:1607
  11: rustc_mir::borrow_check::MirBorrowckCtxt::describe_field_from_ty
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:0
  12: rustc_mir::borrow_check::MirBorrowckCtxt::describe_field
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:0
  13: rustc_mir::borrow_check::MirBorrowckCtxt::describe_field
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:1565
  14: rustc_mir::borrow_check::MirBorrowckCtxt::append_lvalue_to_string
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:1515
  15: rustc_mir::borrow_check::MirBorrowckCtxt::append_lvalue_to_string
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:1530
  16: rustc_mir::borrow_check::MirBorrowckCtxt::access_lvalue
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:1488
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:877
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:450
  17: <rustc_mir::borrow_check::MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx> as rustc_mir::dataflow::DataflowResultsConsumer<'b, 'tcx>>::visit_statement_entry
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:533
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:245
  18: rustc_mir::borrow_check::do_mir_borrowck
             at /home/ariel/Rust/rust-master/src/librustc_mir/dataflow/mod.rs:309
             at /home/ariel/Rust/rust-master/src/librustc_mir/dataflow/mod.rs:299
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:147
  19: rustc_mir::borrow_check::mir_borrowck
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:64
             at /home/ariel/Rust/rust-master/src/librustc/infer/mod.rs:375
             at /home/ariel/Rust/rust-master/src/librustc/ty/context.rs:1522
             at /home/ariel/Rust/rust-master/src/libstd/thread/local.rs:377
             at /home/ariel/Rust/rust-master/src/libstd/thread/local.rs:288
             at /home/ariel/Rust/rust-master/src/librustc/ty/context.rs:1519
             at /home/ariel/Rust/rust-master/src/librustc/ty/context.rs:1330
             at /home/ariel/Rust/rust-master/src/librustc/infer/mod.rs:375
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:62
  20: rustc::dep_graph::graph::DepGraph::with_task_impl
             at /home/ariel/Rust/rust-master/src/librustc/ty/maps/plumbing.rs:370
             at /home/ariel/Rust/rust-master/src/librustc/dep_graph/graph.rs:273
  21: rustc::ty::maps::<impl rustc::ty::maps::queries::mir_borrowck<'tcx>>::force
             at /home/ariel/Rust/rust-master/src/librustc/dep_graph/graph.rs:189
             at /home/ariel/Rust/rust-master/src/librustc/ty/maps/plumbing.rs:452
             at /home/ariel/Rust/rust-master/src/librustc_errors/lib.rs:548
             at /home/ariel/Rust/rust-master/src/librustc/ty/maps/plumbing.rs:445
             at /home/ariel/Rust/rust-master/src/librustc/ty/maps/plumbing.rs:115
             at /home/ariel/Rust/rust-master/src/librustc/ty/maps/plumbing.rs:444
  22: rustc::ty::maps::<impl rustc::ty::maps::queries::mir_borrowck<'tcx>>::try_get
             at /home/ariel/Rust/rust-master/src/librustc/ty/maps/plumbing.rs:288
             at /home/ariel/Rust/rust-master/src/librustc/ty/maps/plumbing.rs:486
  23: rustc::ty::maps::TyCtxtAt::mir_borrowck
             at /home/ariel/Rust/rust-master/src/librustc/ty/maps/plumbing.rs:525
  24: rustc::ty::maps::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'lcx>>::mir_borrowck
             at /home/ariel/Rust/rust-master/src/librustc/ty/maps/plumbing.rs:518
  25: rustc_driver::driver::phase_3_run_analysis_passes::{{closure}}::{{closure}}
             at /home/ariel/Rust/rust-master/src/librustc_driver/driver.rs:1064
  26: rustc::ty::context::TyCtxt::create_and_enter
             at /home/ariel/Rust/rust-master/src/librustc/util/common.rs:120
             at /home/ariel/Rust/rust-master/src/librustc_driver/driver.rs:1062
             at /home/ariel/Rust/rust-master/src/librustc/ty/context.rs:1522
             at /home/ariel/Rust/rust-master/src/libstd/thread/local.rs:377
             at /home/ariel/Rust/rust-master/src/libstd/thread/local.rs:288
             at /home/ariel/Rust/rust-master/src/librustc/ty/context.rs:1519
             at /home/ariel/Rust/rust-master/src/librustc/ty/context.rs:1506
             at /home/ariel/Rust/rust-master/src/libstd/thread/local.rs:377
             at /home/ariel/Rust/rust-master/src/libstd/thread/local.rs:288
             at /home/ariel/Rust/rust-master/src/librustc/ty/context.rs:1503
             at /home/ariel/Rust/rust-master/src/librustc/ty/context.rs:1138
  27: rustc_driver::driver::compile_input
             at /home/ariel/Rust/rust-master/src/librustc_driver/driver.rs:1010
             at /home/ariel/Rust/rust-master/src/librustc_driver/driver.rs:209
  28: rustc_driver::run_compiler
             at /home/ariel/Rust/rust-master/src/librustc_driver/lib.rs:253

