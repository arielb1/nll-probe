{"message":"cannot borrow `l.0` as mutable more than once at a time (Ast)","code":{"code":"E0499","explanation":"\nA variable was borrowed as mutable more than once. Erroneous code example:\n\n```compile_fail,E0499\nlet mut i = 0;\nlet mut x = &mut i;\nlet mut a = &mut i;\n// error: cannot borrow `i` as mutable more than once at a time\n```\n\nPlease note that in rust, you can either have many immutable references, or one\nmutable reference. Take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html for more\ninformation. Example:\n\n\n```\nlet mut i = 0;\nlet mut x = &mut i; // ok!\n\n// or:\nlet mut i = 0;\nlet a = &i; // ok!\nlet b = &i; // still ok!\nlet c = &i; // still ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-25579.rs","byte_start":678,"byte_end":690,"line_start":19,"line_end":19,"column_start":32,"column_end":44,"is_primary":true,"text":[{"text":"        &mut Sexpression::Cons(ref mut expr) => { //~ ERROR cannot borrow `l.0`","highlight_start":32,"highlight_end":44}],"label":"mutable borrow starts here in previous iteration of loop","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-25579.rs","byte_start":804,"byte_end":805,"line_start":23,"line_end":23,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"mutable borrow ends here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot assign to `l` because it is borrowed (Ast)","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-25579.rs","byte_start":678,"byte_end":690,"line_start":19,"line_end":19,"column_start":32,"column_end":44,"is_primary":false,"text":[{"text":"        &mut Sexpression::Cons(ref mut expr) => { //~ ERROR cannot borrow `l.0`","highlight_start":32,"highlight_end":44}],"label":"borrow of `l` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-25579.rs","byte_start":739,"byte_end":754,"line_start":20,"line_end":20,"column_start":13,"column_end":28,"is_primary":true,"text":[{"text":"            l = &mut **expr; //~ ERROR cannot assign to `l`","highlight_start":13,"highlight_end":28}],"label":"assignment to borrowed `l` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot assign twice to immutable variable `n` (Mir)","code":{"code":"E0384","explanation":"\nThis error occurs when an attempt is made to reassign an immutable variable.\nFor example:\n\n```compile_fail,E0384\nfn main() {\n    let x = 3;\n    x = 5; // error, reassignment of immutable variable\n}\n```\n\nBy default, variables in Rust are immutable. To fix this error, add the keyword\n`mut` after the keyword `let` when declaring the variable. For example:\n\n```\nfn main() {\n    let mut x = 3;\n    x = 5;\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-25579.rs","byte_start":629,"byte_end":638,"line_start":18,"line_end":18,"column_start":31,"column_end":40,"is_primary":true,"text":[{"text":"        &mut Sexpression::Num(ref mut n) => {},","highlight_start":31,"highlight_end":40}],"label":"cannot assign twice to immutable variable","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-25579.rs","byte_start":629,"byte_end":638,"line_start":18,"line_end":18,"column_start":31,"column_end":40,"is_primary":true,"text":[{"text":"        &mut Sexpression::Num(ref mut n) => {},","highlight_start":31,"highlight_end":40}],"label":"first assignment to `n`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot assign to `expr` because it is borrowed (Mir)","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-25579.rs","byte_start":743,"byte_end":754,"line_start":20,"line_end":20,"column_start":17,"column_end":28,"is_primary":false,"text":[{"text":"            l = &mut **expr; //~ ERROR cannot assign to `l`","highlight_start":17,"highlight_end":28}],"label":"borrow of `expr` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-25579.rs","byte_start":678,"byte_end":690,"line_start":19,"line_end":19,"column_start":32,"column_end":44,"is_primary":true,"text":[{"text":"        &mut Sexpression::Cons(ref mut expr) => { //~ ERROR cannot borrow `l.0`","highlight_start":32,"highlight_end":44}],"label":"assignment to borrowed `expr` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot assign twice to immutable variable `expr` (Mir)","code":{"code":"E0384","explanation":"\nThis error occurs when an attempt is made to reassign an immutable variable.\nFor example:\n\n```compile_fail,E0384\nfn main() {\n    let x = 3;\n    x = 5; // error, reassignment of immutable variable\n}\n```\n\nBy default, variables in Rust are immutable. To fix this error, add the keyword\n`mut` after the keyword `let` when declaring the variable. For example:\n\n```\nfn main() {\n    let mut x = 3;\n    x = 5;\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-25579.rs","byte_start":678,"byte_end":690,"line_start":19,"line_end":19,"column_start":32,"column_end":44,"is_primary":true,"text":[{"text":"        &mut Sexpression::Cons(ref mut expr) => { //~ ERROR cannot borrow `l.0`","highlight_start":32,"highlight_end":44}],"label":"cannot assign twice to immutable variable","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-25579.rs","byte_start":678,"byte_end":690,"line_start":19,"line_end":19,"column_start":32,"column_end":44,"is_primary":true,"text":[{"text":"        &mut Sexpression::Cons(ref mut expr) => { //~ ERROR cannot borrow `l.0`","highlight_start":32,"highlight_end":44}],"label":"first assignment to `expr`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
error: internal compiler error: unexpected panic

note: the compiler unexpectedly panicked. this is a bug.

note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports

note: rustc 1.23.0-dev running on x86_64-unknown-linux-gnu

thread 'rustc' panicked at 'end region not found for ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => issue_25579[317d]::causes_ice[0] }, BrAnon(0))', /home/ariel/Rust/rust-master/src/librustc_mir/dataflow/impls/borrows.rs:121:8
note: Run with `RUST_BACKTRACE=1` for a backtrace.

