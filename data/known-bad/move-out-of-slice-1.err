{"message":"cannot move out of type `[A]`, a non-copy slice (Ast)","code":{"code":"E0508","explanation":"\nA value was moved out of a non-copy fixed-size array.\n\nExample of erroneous code:\n\n```compile_fail,E0508\nstruct NonCopy;\n\nfn main() {\n    let array = [NonCopy; 1];\n    let _value = array[0]; // error: cannot move out of type `[NonCopy; 1]`,\n                           //        a non-copy fixed-size array\n}\n```\n\nThe first element was moved out of the array, but this is not\npossible because `NonCopy` does not implement the `Copy` trait.\n\nConsider borrowing the element instead of moving it:\n\n```\nstruct NonCopy;\n\nfn main() {\n    let array = [NonCopy; 1];\n    let _value = &array[0]; // Borrowing is allowed, unlike moving.\n}\n```\n\nAlternatively, if your type implements `Clone` and you need to own the value,\nconsider borrowing and then cloning:\n\n```\n#[derive(Clone)]\nstruct NonCopy;\n\nfn main() {\n    let array = [NonCopy; 1];\n    // Now you can clone the array element.\n    let _value = array[0].clone();\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/move-out-of-slice-1.rs","byte_start":596,"byte_end":599,"line_start":18,"line_end":18,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        box [a] => {}, //~ ERROR cannot move out of type `[A]`, a non-copy slice","highlight_start":13,"highlight_end":16}],"label":"cannot move out of here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/move-out-of-slice-1.rs","byte_start":597,"byte_end":598,"line_start":18,"line_end":18,"column_start":14,"column_end":15,"is_primary":false,"text":[{"text":"        box [a] => {}, //~ ERROR cannot move out of type `[A]`, a non-copy slice","highlight_start":14,"highlight_end":15}],"label":"hint: to prevent move, use `ref a` or `ref mut a`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"/home/ariel/Rust/rust-master/src/librustc_mir/util/borrowck_errors.rs:274: this path should not cause illegal move","code":null,"level":"error: internal compiler error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/move-out-of-slice-1.rs","byte_start":597,"byte_end":598,"line_start":18,"line_end":18,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"        box [a] => {}, //~ ERROR cannot move out of type `[A]`, a non-copy slice","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
note: the compiler unexpectedly panicked. this is a bug.

note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports

note: rustc 1.23.0-dev running on x86_64-unknown-linux-gnu

thread 'rustc' panicked at 'Box<Any>', /home/ariel/Rust/rust-master/src/librustc_errors/lib.rs:450:8
note: Run with `RUST_BACKTRACE=1` for a backtrace.

