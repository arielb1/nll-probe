{"message":"cannot borrow `*a` as mutable because previous closure requires unique access (Ast)","code":{"code":"E0501","explanation":"\nThis error indicates that a mutable variable is being used while it is still\ncaptured by a closure. Because the closure has borrowed the variable, it is not\navailable for use until the closure goes out of scope.\n\nNote that a capture will either move or borrow a variable, but in this\nsituation, the closure is borrowing the variable. Take a look at\nhttp://rustbyexample.com/fn/closures/capture.html for more information about\ncapturing.\n\nExample of erroneous code:\n\n```compile_fail,E0501\nfn inside_closure(x: &mut i32) {\n    // Actions which require unique access\n}\n\nfn outside_closure(x: &mut i32) {\n    // Actions which require unique access\n}\n\nfn foo(a: &mut i32) {\n    let bar = || {\n        inside_closure(a)\n    };\n    outside_closure(a); // error: cannot borrow `*a` as mutable because previous\n                        //        closure requires unique access.\n}\n```\n\nTo fix this error, you can place the closure in its own scope:\n\n```\nfn inside_closure(x: &mut i32) {}\nfn outside_closure(x: &mut i32) {}\n\nfn foo(a: &mut i32) {\n    {\n        let bar = || {\n            inside_closure(a)\n        };\n    } // borrow on `a` ends.\n    outside_closure(a); // ok!\n}\n```\n\nOr you can pass the variable as a parameter to the closure:\n\n```\nfn inside_closure(x: &mut i32) {}\nfn outside_closure(x: &mut i32) {}\n\nfn foo(a: &mut i32) {\n    let bar = |s: &mut i32| {\n        inside_closure(s)\n    };\n    outside_closure(a);\n    bar(a);\n}\n```\n\nIt may be possible to define the closure later:\n\n```\nfn inside_closure(x: &mut i32) {}\nfn outside_closure(x: &mut i32) {}\n\nfn foo(a: &mut i32) {\n    outside_closure(a);\n    let bar = || {\n        inside_closure(a)\n    };\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/E0501.rs","byte_start":634,"byte_end":635,"line_start":21,"line_end":21,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"    outside_closure(a); //~ ERROR E0501","highlight_start":21,"highlight_end":22}],"label":"borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/E0501.rs","byte_start":576,"byte_end":578,"line_start":18,"line_end":18,"column_start":15,"column_end":17,"is_primary":false,"text":[{"text":"    let bar = || {","highlight_start":15,"highlight_end":17}],"label":"closure construction occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/E0501.rs","byte_start":654,"byte_end":655,"line_start":22,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"borrow from closure ends here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/E0501.rs","byte_start":604,"byte_end":605,"line_start":19,"line_end":19,"column_start":24,"column_end":25,"is_primary":false,"text":[{"text":"        inside_closure(a)","highlight_start":24,"highlight_end":25}],"label":"previous borrow occurs due to use of `a` in closure","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot borrow `(*a)`it as  because previous closure requires unique access (Mir)","code":{"code":"E0501","explanation":"\nThis error indicates that a mutable variable is being used while it is still\ncaptured by a closure. Because the closure has borrowed the variable, it is not\navailable for use until the closure goes out of scope.\n\nNote that a capture will either move or borrow a variable, but in this\nsituation, the closure is borrowing the variable. Take a look at\nhttp://rustbyexample.com/fn/closures/capture.html for more information about\ncapturing.\n\nExample of erroneous code:\n\n```compile_fail,E0501\nfn inside_closure(x: &mut i32) {\n    // Actions which require unique access\n}\n\nfn outside_closure(x: &mut i32) {\n    // Actions which require unique access\n}\n\nfn foo(a: &mut i32) {\n    let bar = || {\n        inside_closure(a)\n    };\n    outside_closure(a); // error: cannot borrow `*a` as mutable because previous\n                        //        closure requires unique access.\n}\n```\n\nTo fix this error, you can place the closure in its own scope:\n\n```\nfn inside_closure(x: &mut i32) {}\nfn outside_closure(x: &mut i32) {}\n\nfn foo(a: &mut i32) {\n    {\n        let bar = || {\n            inside_closure(a)\n        };\n    } // borrow on `a` ends.\n    outside_closure(a); // ok!\n}\n```\n\nOr you can pass the variable as a parameter to the closure:\n\n```\nfn inside_closure(x: &mut i32) {}\nfn outside_closure(x: &mut i32) {}\n\nfn foo(a: &mut i32) {\n    let bar = |s: &mut i32| {\n        inside_closure(s)\n    };\n    outside_closure(a);\n    bar(a);\n}\n```\n\nIt may be possible to define the closure later:\n\n```\nfn inside_closure(x: &mut i32) {}\nfn outside_closure(x: &mut i32) {}\n\nfn foo(a: &mut i32) {\n    outside_closure(a);\n    let bar = || {\n        inside_closure(a)\n    };\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/E0501.rs","byte_start":634,"byte_end":635,"line_start":21,"line_end":21,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"    outside_closure(a); //~ ERROR E0501","highlight_start":21,"highlight_end":22}],"label":"borrow occurs hereit","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/E0501.rs","byte_start":576,"byte_end":612,"line_start":18,"line_end":20,"column_start":15,"column_end":6,"is_primary":false,"text":[{"text":"    let bar = || {","highlight_start":15,"highlight_end":19},{"text":"        inside_closure(a)","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":"closure construction occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/E0501.rs","byte_start":654,"byte_end":655,"line_start":22,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"borrow from closure ends here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":null}
