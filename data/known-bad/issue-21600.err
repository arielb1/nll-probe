{"message":"cannot borrow data mutably in a captured outer variable in an `Fn` closure (Ast)","code":{"code":"E0387","explanation":"\nThis error occurs when an attempt is made to mutate or mutably reference data\nthat a closure has captured immutably. Examples of this error are shown below:\n\n```compile_fail,E0387\n// Accepts a function or a closure that captures its environment immutably.\n// Closures passed to foo will not be able to mutate their closed-over state.\nfn foo<F: Fn()>(f: F) { }\n\n// Attempts to mutate closed-over data. Error message reads:\n// `cannot assign to data in a captured outer variable...`\nfn mutable() {\n    let mut x = 0u32;\n    foo(|| x = 2);\n}\n\n// Attempts to take a mutable reference to closed-over data.  Error message\n// reads: `cannot borrow data mutably in a captured outer variable...`\nfn mut_addr() {\n    let mut x = 0u32;\n    foo(|| { let y = &mut x; });\n}\n```\n\nThe problem here is that foo is defined as accepting a parameter of type `Fn`.\nClosures passed into foo will thus be inferred to be of type `Fn`, meaning that\nthey capture their context immutably.\n\nIf the definition of `foo` is under your control, the simplest solution is to\ncapture the data mutably. This can be done by defining `foo` to take FnMut\nrather than Fn:\n\n```\nfn foo<F: FnMut()>(f: F) { }\n```\n\nAlternatively, we can consider using the `Cell` and `RefCell` types to achieve\ninterior mutability through a shared reference. Our example's `mutable`\nfunction could be redefined as below:\n\n```\nuse std::cell::Cell;\n\nfn foo<F: Fn()>(f: F) { }\n\nfn mutable() {\n    let x = Cell::new(0u32);\n    foo(|| x.set(2));\n}\n```\n\nYou can read more about cell types in the API documentation:\n\nhttps://doc.rust-lang.org/std/cell/\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-21600.rs","byte_start":754,"byte_end":756,"line_start":24,"line_end":24,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"        call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer","highlight_start":17,"highlight_end":19}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[{"message":"consider changing this to accept closures that implement `FnMut`","code":null,"level":"help","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-21600.rs","byte_start":627,"byte_end":982,"line_start":22,"line_end":27,"column_start":13,"column_end":6,"is_primary":true,"text":[{"text":"    call_it(|| {    //~ HELP consider changing this to accept closures that implement `FnMut`","highlight_start":13,"highlight_end":94},{"text":"        call_it(|| x.gen());","highlight_start":1,"highlight_end":29},{"text":"        call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer","highlight_start":1,"highlight_end":90},{"text":"        //~^ ERROR cannot borrow data mutably in a captured outer","highlight_start":1,"highlight_end":66},{"text":"        //~| HELP consider changing this closure to take self by mutable reference","highlight_start":1,"highlight_end":83},{"text":"    });","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}],"rendered":null}
{"message":"cannot borrow data mutably in a captured outer variable in an `Fn` closure (Ast)","code":{"code":"E0387","explanation":"\nThis error occurs when an attempt is made to mutate or mutably reference data\nthat a closure has captured immutably. Examples of this error are shown below:\n\n```compile_fail,E0387\n// Accepts a function or a closure that captures its environment immutably.\n// Closures passed to foo will not be able to mutate their closed-over state.\nfn foo<F: Fn()>(f: F) { }\n\n// Attempts to mutate closed-over data. Error message reads:\n// `cannot assign to data in a captured outer variable...`\nfn mutable() {\n    let mut x = 0u32;\n    foo(|| x = 2);\n}\n\n// Attempts to take a mutable reference to closed-over data.  Error message\n// reads: `cannot borrow data mutably in a captured outer variable...`\nfn mut_addr() {\n    let mut x = 0u32;\n    foo(|| { let y = &mut x; });\n}\n```\n\nThe problem here is that foo is defined as accepting a parameter of type `Fn`.\nClosures passed into foo will thus be inferred to be of type `Fn`, meaning that\nthey capture their context immutably.\n\nIf the definition of `foo` is under your control, the simplest solution is to\ncapture the data mutably. This can be done by defining `foo` to take FnMut\nrather than Fn:\n\n```\nfn foo<F: FnMut()>(f: F) { }\n```\n\nAlternatively, we can consider using the `Cell` and `RefCell` types to achieve\ninterior mutability through a shared reference. Our example's `mutable`\nfunction could be redefined as below:\n\n```\nuse std::cell::Cell;\n\nfn foo<F: Fn()>(f: F) { }\n\nfn mutable() {\n    let x = Cell::new(0u32);\n    foo(|| x.set(2));\n}\n```\n\nYou can read more about cell types in the API documentation:\n\nhttps://doc.rust-lang.org/std/cell/\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-21600.rs","byte_start":757,"byte_end":758,"line_start":24,"line_end":24,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"        call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer","highlight_start":20,"highlight_end":21}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[{"message":"consider changing this closure to take self by mutable reference","code":null,"level":"help","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-21600.rs","byte_start":754,"byte_end":768,"line_start":24,"line_end":24,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"        call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}],"rendered":null}
{"message":"cannot borrow immutable item `(*x)` as mutable (Mir)","code":{"code":"E0596","explanation":"\nThis error occurs because you tried to mutably borrow a non-mutable variable.\n\nExample of erroneous code:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-21600.rs","byte_start":754,"byte_end":768,"line_start":24,"line_end":24,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"        call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer","highlight_start":17,"highlight_end":31}],"label":"cannot borrow as mutable","suggested_replacement":null,"expansion":null}],"children":[{"message":"Value not mutable causing this error: `(*_)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":null}
{"message":"cannot borrow immutable item `(*x)` as mutable (Mir)","code":{"code":"E0596","explanation":"\nThis error occurs because you tried to mutably borrow a non-mutable variable.\n\nExample of erroneous code:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-21600.rs","byte_start":757,"byte_end":758,"line_start":24,"line_end":24,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"        call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer","highlight_start":20,"highlight_end":21}],"label":"cannot borrow as mutable","suggested_replacement":null,"expansion":null}],"children":[{"message":"Value not mutable causing this error: `(*_)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":null}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":null}
