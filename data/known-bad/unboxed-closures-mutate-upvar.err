{"message":"closure cannot assign to immutable local variable `n` (Ast)","code":{"code":"E0595","explanation":"\nClosures cannot mutate immutable captured variables.\n\nErroneous code example:\n\n```compile_fail,E0595\nlet x = 3; // error: closure cannot assign to immutable local variable `x`\nlet mut c = || { x += 1 };\n```\n\nMake the variable binding mutable:\n\n```\nlet mut x = 3; // ok!\nlet mut c = || { x += 1 };\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/unboxed-closures-mutate-upvar.rs","byte_start":837,"byte_end":839,"line_start":24,"line_end":24,"column_start":27,"column_end":29,"is_primary":true,"text":[{"text":"    let mut f = to_fn_mut(|| { //~ ERROR closure cannot assign","highlight_start":27,"highlight_end":29}],"label":"cannot borrow mutably","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/unboxed-closures-mutate-upvar.rs","byte_start":804,"byte_end":805,"line_start":23,"line_end":23,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"    let n = 0;","highlight_start":9,"highlight_end":10}],"label":"consider changing this to `mut n`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot assign to captured outer variable in an `FnMut` closure (Ast)","code":{"code":"E0594","explanation":null},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/unboxed-closures-mutate-upvar.rs","byte_start":1226,"byte_end":1232,"line_start":42,"line_end":42,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        n += 1; //~ ERROR cannot assign","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[{"message":"consider making `n` mutable","code":null,"level":"help","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/unboxed-closures-mutate-upvar.rs","byte_start":1010,"byte_end":1011,"line_start":37,"line_end":37,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let n = 0;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"mut n","expansion":null}],"children":[],"rendered":null}],"rendered":null}
{"message":"cannot assign to captured outer variable in an `Fn` closure (Ast)","code":{"code":"E0594","explanation":null},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/unboxed-closures-mutate-upvar.rs","byte_start":1430,"byte_end":1436,"line_start":56,"line_end":56,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        n += 1; //~ ERROR cannot assign","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[{"message":"consider changing this closure to take self by mutable reference","code":null,"level":"help","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/unboxed-closures-mutate-upvar.rs","byte_start":1412,"byte_end":1467,"line_start":55,"line_end":57,"column_start":23,"column_end":6,"is_primary":true,"text":[{"text":"    let mut f = to_fn(move || {","highlight_start":23,"highlight_end":32},{"text":"        n += 1; //~ ERROR cannot assign","highlight_start":1,"highlight_end":40},{"text":"    });","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider making `n` mutable","code":null,"level":"help","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/unboxed-closures-mutate-upvar.rs","byte_start":1383,"byte_end":1384,"line_start":54,"line_end":54,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let n = 0;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"mut n","expansion":null}],"children":[],"rendered":null}],"rendered":null}
{"message":"cannot assign to captured outer variable in an `Fn` closure (Ast)","code":{"code":"E0594","explanation":null},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/unboxed-closures-mutate-upvar.rs","byte_start":1541,"byte_end":1547,"line_start":63,"line_end":63,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        n += 1; //~ ERROR cannot assign","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[{"message":"consider changing this closure to take self by mutable reference","code":null,"level":"help","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/unboxed-closures-mutate-upvar.rs","byte_start":1523,"byte_end":1578,"line_start":62,"line_end":64,"column_start":23,"column_end":6,"is_primary":true,"text":[{"text":"    let mut f = to_fn(move || {","highlight_start":23,"highlight_end":32},{"text":"        n += 1; //~ ERROR cannot assign","highlight_start":1,"highlight_end":40},{"text":"    });","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider making `mut n` mutable","code":null,"level":"help","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/unboxed-closures-mutate-upvar.rs","byte_start":1490,"byte_end":1495,"line_start":61,"line_end":61,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"    let mut n = 0;","highlight_start":9,"highlight_end":14}],"label":null,"suggested_replacement":"mut mut n","expansion":null}],"children":[],"rendered":null}],"rendered":null}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":null}
