{"message":"closure requires unique access to `x` but it is already borrowed (Ast)","code":{"code":"E0500","explanation":"\nA borrowed variable was used in another closure. Example of erroneous code:\n\n```compile_fail\nfn you_know_nothing(jon_snow: &mut i32) {\n    let nights_watch = || {\n        *jon_snow = 2;\n    };\n    let starks = || {\n        *jon_snow = 3; // error: closure requires unique access to `jon_snow`\n                       //        but it is already borrowed\n    };\n}\n```\n\nIn here, `jon_snow` is already borrowed by the `nights_watch` closure, so it\ncannot be borrowed by the `starks` closure at the same time. To fix this issue,\nyou can put the closure in its own scope:\n\n```\nfn you_know_nothing(jon_snow: &mut i32) {\n    {\n        let nights_watch = || {\n            *jon_snow = 2;\n        };\n    } // At this point, `jon_snow` is free.\n    let starks = || {\n        *jon_snow = 3;\n    };\n}\n```\n\nOr, if the type implements the `Clone` trait, you can clone it between\nclosures:\n\n```\nfn you_know_nothing(jon_snow: &mut i32) {\n    let mut jon_copy = jon_snow.clone();\n    let nights_watch = || {\n        jon_copy = 2;\n    };\n    let starks = || {\n        *jon_snow = 3;\n    };\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":951,"byte_end":953,"line_start":32,"line_end":32,"column_start":14,"column_end":16,"is_primary":true,"text":[{"text":"    let c2 = || set(x); //~ ERROR closure requires unique access to `x`","highlight_start":14,"highlight_end":16}],"label":"closure construction occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":927,"byte_end":929,"line_start":31,"line_end":31,"column_start":14,"column_end":16,"is_primary":false,"text":[{"text":"    let c1 = || get(x);","highlight_start":14,"highlight_end":16}],"label":"borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1010,"byte_end":1011,"line_start":33,"line_end":33,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"borrow ends here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":958,"byte_end":959,"line_start":32,"line_end":32,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"    let c2 = || set(x); //~ ERROR closure requires unique access to `x`","highlight_start":21,"highlight_end":22}],"label":"borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":934,"byte_end":935,"line_start":31,"line_end":31,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"    let c1 = || get(x);","highlight_start":21,"highlight_end":22}],"label":"previous borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"closure requires unique access to `x` but it is already borrowed (Ast)","code":{"code":"E0500","explanation":"\nA borrowed variable was used in another closure. Example of erroneous code:\n\n```compile_fail\nfn you_know_nothing(jon_snow: &mut i32) {\n    let nights_watch = || {\n        *jon_snow = 2;\n    };\n    let starks = || {\n        *jon_snow = 3; // error: closure requires unique access to `jon_snow`\n                       //        but it is already borrowed\n    };\n}\n```\n\nIn here, `jon_snow` is already borrowed by the `nights_watch` closure, so it\ncannot be borrowed by the `starks` closure at the same time. To fix this issue,\nyou can put the closure in its own scope:\n\n```\nfn you_know_nothing(jon_snow: &mut i32) {\n    {\n        let nights_watch = || {\n            *jon_snow = 2;\n        };\n    } // At this point, `jon_snow` is free.\n    let starks = || {\n        *jon_snow = 3;\n    };\n}\n```\n\nOr, if the type implements the `Clone` trait, you can clone it between\nclosures:\n\n```\nfn you_know_nothing(jon_snow: &mut i32) {\n    let mut jon_copy = jon_snow.clone();\n    let nights_watch = || {\n        jon_copy = 2;\n    };\n    let starks = || {\n        *jon_snow = 3;\n    };\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1072,"byte_end":1074,"line_start":37,"line_end":37,"column_start":14,"column_end":16,"is_primary":true,"text":[{"text":"    let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique access to `x`","highlight_start":14,"highlight_end":16}],"label":"closure construction occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1048,"byte_end":1050,"line_start":36,"line_end":36,"column_start":14,"column_end":16,"is_primary":false,"text":[{"text":"    let c1 = || get(x);","highlight_start":14,"highlight_end":16}],"label":"borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1144,"byte_end":1145,"line_start":38,"line_end":38,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"borrow ends here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1081,"byte_end":1082,"line_start":37,"line_end":37,"column_start":23,"column_end":24,"is_primary":false,"text":[{"text":"    let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique access to `x`","highlight_start":23,"highlight_end":24}],"label":"borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1055,"byte_end":1056,"line_start":36,"line_end":36,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"    let c1 = || get(x);","highlight_start":21,"highlight_end":22}],"label":"previous borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"two closures require unique access to `x` at the same time (Ast)","code":{"code":"E0524","explanation":null},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1182,"byte_end":1184,"line_start":41,"line_end":41,"column_start":14,"column_end":16,"is_primary":false,"text":[{"text":"    let c1 = || set(x);","highlight_start":14,"highlight_end":16}],"label":"first closure is constructed here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1206,"byte_end":1208,"line_start":42,"line_end":42,"column_start":14,"column_end":16,"is_primary":true,"text":[{"text":"    let c2 = || set(x); //~ ERROR two closures require unique access to `x` at the same time","highlight_start":14,"highlight_end":16}],"label":"second closure is constructed here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1286,"byte_end":1287,"line_start":43,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"borrow from first closure ends here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1213,"byte_end":1214,"line_start":42,"line_end":42,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"    let c2 = || set(x); //~ ERROR two closures require unique access to `x` at the same time","highlight_start":21,"highlight_end":22}],"label":"borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1189,"byte_end":1190,"line_start":41,"line_end":41,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"    let c1 = || set(x);","highlight_start":21,"highlight_end":22}],"label":"previous borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"closure cannot assign to immutable argument `x` (Ast)","code":{"code":"E0595","explanation":"\nClosures cannot mutate immutable captured variables.\n\nErroneous code example:\n\n```compile_fail,E0595\nlet x = 3; // error: closure cannot assign to immutable local variable `x`\nlet mut c = || { x += 1 };\n```\n\nMake the variable binding mutable:\n\n```\nlet mut x = 3; // ok!\nlet mut c = || { x += 1 };\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1324,"byte_end":1326,"line_start":46,"line_end":46,"column_start":14,"column_end":16,"is_primary":true,"text":[{"text":"    let c1 = || x = panic!(); //~ ERROR closure cannot assign to immutable argument","highlight_start":14,"highlight_end":16}],"label":"cannot borrow mutably","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1294,"byte_end":1295,"line_start":45,"line_end":45,"column_start":6,"column_end":7,"is_primary":false,"text":[{"text":"fn e(x: &mut isize) {","highlight_start":6,"highlight_end":7}],"label":"consider changing this to `mut x`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"closure requires unique access to `x` but it is already borrowed (Mir)","code":{"code":"E0500","explanation":"\nA borrowed variable was used in another closure. Example of erroneous code:\n\n```compile_fail\nfn you_know_nothing(jon_snow: &mut i32) {\n    let nights_watch = || {\n        *jon_snow = 2;\n    };\n    let starks = || {\n        *jon_snow = 3; // error: closure requires unique access to `jon_snow`\n                       //        but it is already borrowed\n    };\n}\n```\n\nIn here, `jon_snow` is already borrowed by the `nights_watch` closure, so it\ncannot be borrowed by the `starks` closure at the same time. To fix this issue,\nyou can put the closure in its own scope:\n\n```\nfn you_know_nothing(jon_snow: &mut i32) {\n    {\n        let nights_watch = || {\n            *jon_snow = 2;\n        };\n    } // At this point, `jon_snow` is free.\n    let starks = || {\n        *jon_snow = 3;\n    };\n}\n```\n\nOr, if the type implements the `Clone` trait, you can clone it between\nclosures:\n\n```\nfn you_know_nothing(jon_snow: &mut i32) {\n    let mut jon_copy = jon_snow.clone();\n    let nights_watch = || {\n        jon_copy = 2;\n    };\n    let starks = || {\n        *jon_snow = 3;\n    };\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":951,"byte_end":953,"line_start":32,"line_end":32,"column_start":14,"column_end":16,"is_primary":true,"text":[{"text":"    let c2 = || set(x); //~ ERROR closure requires unique access to `x`","highlight_start":14,"highlight_end":16}],"label":"closure construction occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":927,"byte_end":929,"line_start":31,"line_end":31,"column_start":14,"column_end":16,"is_primary":false,"text":[{"text":"    let c1 = || get(x);","highlight_start":14,"highlight_end":16}],"label":"borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1010,"byte_end":1011,"line_start":33,"line_end":33,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"borrow ends here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":934,"byte_end":935,"line_start":31,"line_end":31,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"    let c1 = || get(x);","highlight_start":21,"highlight_end":22}],"label":"previous borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":958,"byte_end":959,"line_start":32,"line_end":32,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"    let c2 = || set(x); //~ ERROR closure requires unique access to `x`","highlight_start":21,"highlight_end":22}],"label":"borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"closure requires unique access to `x` but it is already borrowed (Mir)","code":{"code":"E0500","explanation":"\nA borrowed variable was used in another closure. Example of erroneous code:\n\n```compile_fail\nfn you_know_nothing(jon_snow: &mut i32) {\n    let nights_watch = || {\n        *jon_snow = 2;\n    };\n    let starks = || {\n        *jon_snow = 3; // error: closure requires unique access to `jon_snow`\n                       //        but it is already borrowed\n    };\n}\n```\n\nIn here, `jon_snow` is already borrowed by the `nights_watch` closure, so it\ncannot be borrowed by the `starks` closure at the same time. To fix this issue,\nyou can put the closure in its own scope:\n\n```\nfn you_know_nothing(jon_snow: &mut i32) {\n    {\n        let nights_watch = || {\n            *jon_snow = 2;\n        };\n    } // At this point, `jon_snow` is free.\n    let starks = || {\n        *jon_snow = 3;\n    };\n}\n```\n\nOr, if the type implements the `Clone` trait, you can clone it between\nclosures:\n\n```\nfn you_know_nothing(jon_snow: &mut i32) {\n    let mut jon_copy = jon_snow.clone();\n    let nights_watch = || {\n        jon_copy = 2;\n    };\n    let starks = || {\n        *jon_snow = 3;\n    };\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1072,"byte_end":1074,"line_start":37,"line_end":37,"column_start":14,"column_end":16,"is_primary":true,"text":[{"text":"    let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique access to `x`","highlight_start":14,"highlight_end":16}],"label":"closure construction occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1048,"byte_end":1050,"line_start":36,"line_end":36,"column_start":14,"column_end":16,"is_primary":false,"text":[{"text":"    let c1 = || get(x);","highlight_start":14,"highlight_end":16}],"label":"borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1144,"byte_end":1145,"line_start":38,"line_end":38,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"borrow ends here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1055,"byte_end":1056,"line_start":36,"line_end":36,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"    let c1 = || get(x);","highlight_start":21,"highlight_end":22}],"label":"previous borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1081,"byte_end":1082,"line_start":37,"line_end":37,"column_start":23,"column_end":24,"is_primary":false,"text":[{"text":"    let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique access to `x`","highlight_start":23,"highlight_end":24}],"label":"borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"two closures require unique access to `x` at the same time (Mir)","code":{"code":"E0524","explanation":null},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1182,"byte_end":1184,"line_start":41,"line_end":41,"column_start":14,"column_end":16,"is_primary":false,"text":[{"text":"    let c1 = || set(x);","highlight_start":14,"highlight_end":16}],"label":"first closure is constructed here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1206,"byte_end":1208,"line_start":42,"line_end":42,"column_start":14,"column_end":16,"is_primary":true,"text":[{"text":"    let c2 = || set(x); //~ ERROR two closures require unique access to `x` at the same time","highlight_start":14,"highlight_end":16}],"label":"second closure is constructed here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1286,"byte_end":1287,"line_start":43,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"borrow from first closure ends here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1189,"byte_end":1190,"line_start":41,"line_end":41,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"    let c1 = || set(x);","highlight_start":21,"highlight_end":22}],"label":"previous borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1213,"byte_end":1214,"line_start":42,"line_end":42,"column_start":21,"column_end":22,"is_primary":false,"text":[{"text":"    let c2 = || set(x); //~ ERROR two closures require unique access to `x` at the same time","highlight_start":21,"highlight_end":22}],"label":"borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot borrow immutable item `x` as mutable (Mir)","code":{"code":"E0596","explanation":"\nThis error occurs because you tried to mutably borrow a non-mutable variable.\n\nExample of erroneous code:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-unique.rs","byte_start":1324,"byte_end":1339,"line_start":46,"line_end":46,"column_start":14,"column_end":29,"is_primary":true,"text":[{"text":"    let c1 = || x = panic!(); //~ ERROR closure cannot assign to immutable argument","highlight_start":14,"highlight_end":29}],"label":"cannot borrow as mutable","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"aborting due to 8 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":null}
