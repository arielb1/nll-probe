{"message":"closure requires unique access to `f` but `*f` is already borrowed (Ast)","code":{"code":"E0500","explanation":"\nA borrowed variable was used in another closure. Example of erroneous code:\n\n```compile_fail\nfn you_know_nothing(jon_snow: &mut i32) {\n    let nights_watch = || {\n        *jon_snow = 2;\n    };\n    let starks = || {\n        *jon_snow = 3; // error: closure requires unique access to `jon_snow`\n                       //        but it is already borrowed\n    };\n}\n```\n\nIn here, `jon_snow` is already borrowed by the `nights_watch` closure, so it\ncannot be borrowed by the `starks` closure at the same time. To fix this issue,\nyou can put the closure in its own scope:\n\n```\nfn you_know_nothing(jon_snow: &mut i32) {\n    {\n        let nights_watch = || {\n            *jon_snow = 2;\n        };\n    } // At this point, `jon_snow` is free.\n    let starks = || {\n        *jon_snow = 3;\n    };\n}\n```\n\nOr, if the type implements the `Clone` trait, you can clone it between\nclosures:\n\n```\nfn you_know_nothing(jon_snow: &mut i32) {\n    let mut jon_copy = jon_snow.clone();\n    let nights_watch = || {\n        jon_copy = 2;\n    };\n    let starks = || {\n        *jon_snow = 3;\n    };\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-insert-during-each.rs","byte_start":718,"byte_end":721,"line_start":27,"line_end":27,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        |a| { //~ ERROR closure requires unique access to `f`","highlight_start":9,"highlight_end":12}],"label":"closure construction occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-insert-during-each.rs","byte_start":703,"byte_end":704,"line_start":26,"line_end":26,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  f.foo(","highlight_start":3,"highlight_end":4}],"label":"borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-insert-during-each.rs","byte_start":809,"byte_end":810,"line_start":29,"line_end":29,"column_start":10,"column_end":11,"is_primary":false,"text":[{"text":"        })","highlight_start":10,"highlight_end":11}],"label":"borrow ends here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-insert-during-each.rs","byte_start":784,"byte_end":785,"line_start":28,"line_end":28,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            f.n.insert(*a);","highlight_start":13,"highlight_end":14}],"label":"borrow occurs due to use of `f` in closure","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot assign twice to immutable variable `val` (Mir)","code":{"code":"E0384","explanation":"\nThis error occurs when an attempt is made to reassign an immutable variable.\nFor example:\n\n```compile_fail,E0384\nfn main() {\n    let x = 3;\n    x = 5; // error, reassignment of immutable variable\n}\n```\n\nBy default, variables in Rust are immutable. To fix this error, add the keyword\n`mut` after the keyword `let` when declaring the variable. For example:\n\n```\nfn main() {\n    let mut x = 3;\n    x = 5;\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-insert-during-each.rs","byte_start":621,"byte_end":669,"line_start":19,"line_end":21,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        for f in &self.n {","highlight_start":9,"highlight_end":27},{"text":"            fun(f);","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"cannot assign twice to immutable variable","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-insert-during-each.rs","byte_start":621,"byte_end":669,"line_start":19,"line_end":21,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        for f in &self.n {","highlight_start":9,"highlight_end":27},{"text":"            fun(f);","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"first assignment to `val`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot assign twice to immutable variable `f` (Mir)","code":{"code":"E0384","explanation":"\nThis error occurs when an attempt is made to reassign an immutable variable.\nFor example:\n\n```compile_fail,E0384\nfn main() {\n    let x = 3;\n    x = 5; // error, reassignment of immutable variable\n}\n```\n\nBy default, variables in Rust are immutable. To fix this error, add the keyword\n`mut` after the keyword `let` when declaring the variable. For example:\n\n```\nfn main() {\n    let mut x = 3;\n    x = 5;\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-insert-during-each.rs","byte_start":621,"byte_end":669,"line_start":19,"line_end":21,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        for f in &self.n {","highlight_start":9,"highlight_end":27},{"text":"            fun(f);","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"cannot assign twice to immutable variable","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-insert-during-each.rs","byte_start":621,"byte_end":669,"line_start":19,"line_end":21,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        for f in &self.n {","highlight_start":9,"highlight_end":27},{"text":"            fun(f);","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"first assignment to `f`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"closure requires unique access to `f` but it is already borrowed (Mir)","code":{"code":"E0500","explanation":"\nA borrowed variable was used in another closure. Example of erroneous code:\n\n```compile_fail\nfn you_know_nothing(jon_snow: &mut i32) {\n    let nights_watch = || {\n        *jon_snow = 2;\n    };\n    let starks = || {\n        *jon_snow = 3; // error: closure requires unique access to `jon_snow`\n                       //        but it is already borrowed\n    };\n}\n```\n\nIn here, `jon_snow` is already borrowed by the `nights_watch` closure, so it\ncannot be borrowed by the `starks` closure at the same time. To fix this issue,\nyou can put the closure in its own scope:\n\n```\nfn you_know_nothing(jon_snow: &mut i32) {\n    {\n        let nights_watch = || {\n            *jon_snow = 2;\n        };\n    } // At this point, `jon_snow` is free.\n    let starks = || {\n        *jon_snow = 3;\n    };\n}\n```\n\nOr, if the type implements the `Clone` trait, you can clone it between\nclosures:\n\n```\nfn you_know_nothing(jon_snow: &mut i32) {\n    let mut jon_copy = jon_snow.clone();\n    let nights_watch = || {\n        jon_copy = 2;\n    };\n    let starks = || {\n        *jon_snow = 3;\n    };\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-insert-during-each.rs","byte_start":718,"byte_end":809,"line_start":27,"line_end":29,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        |a| { //~ ERROR closure requires unique access to `f`","highlight_start":9,"highlight_end":62},{"text":"            f.n.insert(*a);","highlight_start":1,"highlight_end":28},{"text":"        })","highlight_start":1,"highlight_end":10}],"label":"closure construction occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-insert-during-each.rs","byte_start":703,"byte_end":704,"line_start":26,"line_end":26,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  f.foo(","highlight_start":3,"highlight_end":4}],"label":"borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-insert-during-each.rs","byte_start":809,"byte_end":810,"line_start":29,"line_end":29,"column_start":10,"column_end":11,"is_primary":false,"text":[{"text":"        })","highlight_start":10,"highlight_end":11}],"label":"borrow ends here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":null}
