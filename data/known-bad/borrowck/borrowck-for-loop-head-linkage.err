{"message":"cannot borrow `vector` as mutable because it is also borrowed as immutable (Ast)","code":{"code":"E0502","explanation":"\nThis error indicates that you are trying to borrow a variable as mutable when it\nhas already been borrowed as immutable.\n\nExample of erroneous code:\n\n```compile_fail,E0502\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    let ref y = a; // a is borrowed as immutable.\n    bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed\n            //        as immutable\n}\n```\n\nTo fix this error, ensure that you don't have any other references to the\nvariable before trying to access it mutably:\n\n```\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    bar(a);\n    let ref y = a; // ok!\n}\n```\n\nFor more information on the rust ownership system, take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html.\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/borrowck/borrowck-for-loop-head-linkage.rs","byte_start":605,"byte_end":611,"line_start":17,"line_end":17,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        vector.extend(repeat(0));      //~ ERROR cannot borrow","highlight_start":9,"highlight_end":15}],"label":"mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/borrowck/borrowck-for-loop-head-linkage.rs","byte_start":551,"byte_end":557,"line_start":15,"line_end":15,"column_start":16,"column_end":22,"is_primary":false,"text":[{"text":"    for &x in &vector {","highlight_start":16,"highlight_end":22}],"label":"immutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/borrowck/borrowck-for-loop-head-linkage.rs","byte_start":713,"byte_end":714,"line_start":19,"line_end":19,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    }","highlight_start":5,"highlight_end":6}],"label":"immutable borrow ends here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot borrow `vector` as mutable because it is also borrowed as immutable (Ast)","code":{"code":"E0502","explanation":"\nThis error indicates that you are trying to borrow a variable as mutable when it\nhas already been borrowed as immutable.\n\nExample of erroneous code:\n\n```compile_fail,E0502\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    let ref y = a; // a is borrowed as immutable.\n    bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed\n            //        as immutable\n}\n```\n\nTo fix this error, ensure that you don't have any other references to the\nvariable before trying to access it mutably:\n\n```\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    bar(a);\n    let ref y = a; // ok!\n}\n```\n\nFor more information on the rust ownership system, take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html.\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/borrowck/borrowck-for-loop-head-linkage.rs","byte_start":668,"byte_end":674,"line_start":18,"line_end":18,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        vector[1] = 5;   //~ ERROR cannot borrow","highlight_start":9,"highlight_end":15}],"label":"mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/borrowck/borrowck-for-loop-head-linkage.rs","byte_start":551,"byte_end":557,"line_start":15,"line_end":15,"column_start":16,"column_end":22,"is_primary":false,"text":[{"text":"    for &x in &vector {","highlight_start":16,"highlight_end":22}],"label":"immutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/borrowck/borrowck-for-loop-head-linkage.rs","byte_start":713,"byte_end":714,"line_start":19,"line_end":19,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    }","highlight_start":5,"highlight_end":6}],"label":"immutable borrow ends here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot assign twice to immutable variable `val` (Mir)","code":{"code":"E0384","explanation":"\nThis error occurs when an attempt is made to reassign an immutable variable.\nFor example:\n\n```compile_fail,E0384\nfn main() {\n    let x = 3;\n    x = 5; // error, reassignment of immutable variable\n}\n```\n\nBy default, variables in Rust are immutable. To fix this error, add the keyword\n`mut` after the keyword `let` when declaring the variable. For example:\n\n```\nfn main() {\n    let mut x = 3;\n    x = 5;\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/borrowck/borrowck-for-loop-head-linkage.rs","byte_start":540,"byte_end":714,"line_start":15,"line_end":19,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    for &x in &vector {","highlight_start":5,"highlight_end":24},{"text":"        let cap = vector.capacity();","highlight_start":1,"highlight_end":37},{"text":"        vector.extend(repeat(0));      //~ ERROR cannot borrow","highlight_start":1,"highlight_end":63},{"text":"        vector[1] = 5;   //~ ERROR cannot borrow","highlight_start":1,"highlight_end":49},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"cannot assign twice to immutable variable","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/borrowck/borrowck-for-loop-head-linkage.rs","byte_start":540,"byte_end":714,"line_start":15,"line_end":19,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    for &x in &vector {","highlight_start":5,"highlight_end":24},{"text":"        let cap = vector.capacity();","highlight_start":1,"highlight_end":37},{"text":"        vector.extend(repeat(0));      //~ ERROR cannot borrow","highlight_start":1,"highlight_end":63},{"text":"        vector[1] = 5;   //~ ERROR cannot borrow","highlight_start":1,"highlight_end":49},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"first assignment to `val`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot assign twice to immutable variable `x` (Mir)","code":{"code":"E0384","explanation":"\nThis error occurs when an attempt is made to reassign an immutable variable.\nFor example:\n\n```compile_fail,E0384\nfn main() {\n    let x = 3;\n    x = 5; // error, reassignment of immutable variable\n}\n```\n\nBy default, variables in Rust are immutable. To fix this error, add the keyword\n`mut` after the keyword `let` when declaring the variable. For example:\n\n```\nfn main() {\n    let mut x = 3;\n    x = 5;\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/borrowck/borrowck-for-loop-head-linkage.rs","byte_start":545,"byte_end":546,"line_start":15,"line_end":15,"column_start":10,"column_end":11,"is_primary":true,"text":[{"text":"    for &x in &vector {","highlight_start":10,"highlight_end":11}],"label":"cannot assign twice to immutable variable","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/borrowck/borrowck-for-loop-head-linkage.rs","byte_start":545,"byte_end":546,"line_start":15,"line_end":15,"column_start":10,"column_end":11,"is_primary":true,"text":[{"text":"    for &x in &vector {","highlight_start":10,"highlight_end":11}],"label":"first assignment to `x`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
error: internal compiler error: unexpected panic

note: the compiler unexpectedly panicked. this is a bug.

note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports

note: rustc 1.23.0-dev running on x86_64-unknown-linux-gnu

thread 'rustc' panicked at 'called `Option::unwrap()` on a `None` value', /home/ariel/Rust/rust-emergency/src/libcore/option.rs:335:20
note: Run with `RUST_BACKTRACE=1` for a backtrace.

