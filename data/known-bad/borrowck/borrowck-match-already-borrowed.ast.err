{"message":"cannot use `foo` because it was mutably borrowed","code":{"code":"E0503","explanation":"\nA value was used after it was mutably borrowed.\n\nExample of erroneous code:\n\n```compile_fail,E0503\nfn main() {\n    let mut value = 3;\n    // Create a mutable borrow of `value`. This borrow\n    // lives until the end of this function.\n    let _borrow = &mut value;\n    let _sum = value + 1; // error: cannot use `value` because\n                          //        it was mutably borrowed\n}\n```\n\nIn this example, `value` is mutably borrowed by `borrow` and cannot be\nused to calculate `sum`. This is not possible because this would violate\nRust's mutability rules.\n\nYou can fix this error by limiting the scope of the borrow:\n\n```\nfn main() {\n    let mut value = 3;\n    // By creating a new block, you can limit the scope\n    // of the reference.\n    {\n        let _borrow = &mut value; // Use `_borrow` inside this block.\n    }\n    // The block has ended and with it the borrow.\n    // You can now use `value` again.\n    let _sum = value + 1;\n}\n```\n\nOr by cloning `value` before borrowing it:\n\n```\nfn main() {\n    let mut value = 3;\n    // We clone `value`, creating a copy.\n    let value_cloned = value.clone();\n    // The mutable borrow is a reference to `value` and\n    // not to `value_cloned`...\n    let _borrow = &mut value;\n    // ... which means we can still use `value_cloned`,\n    let _sum = value_cloned + 1;\n    // even though the borrow only ends here.\n}\n```\n\nYou can find more information about borrowing in the rust-book:\nhttp://doc.rust-lang.org/stable/book/references-and-borrowing.html\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-match-already-borrowed.rs","byte_start":616,"byte_end":624,"line_start":21,"line_end":21,"column_start":13,"column_end":21,"is_primary":false,"text":[{"text":"    let p = &mut foo;","highlight_start":13,"highlight_end":21}],"label":"borrow of `foo` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-match-already-borrowed.rs","byte_start":658,"byte_end":664,"line_start":23,"line_end":23,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        Foo::B => 1, //[mir]~ ERROR [E0503]","highlight_start":9,"highlight_end":15}],"label":"use of borrowed `foo`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0503]: cannot use `foo` because it was mutably borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-match-already-borrowed.rs:23:9\n   |\n21 |     let p = &mut foo;\n   |             -------- borrow of `foo` occurs here\n22 |     let _ = match foo {\n23 |         Foo::B => 1, //[mir]~ ERROR [E0503]\n   |         ^^^^^^ use of borrowed `foo`\n\n"}
{"message":"cannot use `foo.0` because it was mutably borrowed","code":{"code":"E0503","explanation":"\nA value was used after it was mutably borrowed.\n\nExample of erroneous code:\n\n```compile_fail,E0503\nfn main() {\n    let mut value = 3;\n    // Create a mutable borrow of `value`. This borrow\n    // lives until the end of this function.\n    let _borrow = &mut value;\n    let _sum = value + 1; // error: cannot use `value` because\n                          //        it was mutably borrowed\n}\n```\n\nIn this example, `value` is mutably borrowed by `borrow` and cannot be\nused to calculate `sum`. This is not possible because this would violate\nRust's mutability rules.\n\nYou can fix this error by limiting the scope of the borrow:\n\n```\nfn main() {\n    let mut value = 3;\n    // By creating a new block, you can limit the scope\n    // of the reference.\n    {\n        let _borrow = &mut value; // Use `_borrow` inside this block.\n    }\n    // The block has ended and with it the borrow.\n    // You can now use `value` again.\n    let _sum = value + 1;\n}\n```\n\nOr by cloning `value` before borrowing it:\n\n```\nfn main() {\n    let mut value = 3;\n    // We clone `value`, creating a copy.\n    let value_cloned = value.clone();\n    // The mutable borrow is a reference to `value` and\n    // not to `value_cloned`...\n    let _borrow = &mut value;\n    // ... which means we can still use `value_cloned`,\n    let _sum = value_cloned + 1;\n    // even though the borrow only ends here.\n}\n```\n\nYou can find more information about borrowing in the rust-book:\nhttp://doc.rust-lang.org/stable/book/references-and-borrowing.html\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-match-already-borrowed.rs","byte_start":616,"byte_end":624,"line_start":21,"line_end":21,"column_start":13,"column_end":21,"is_primary":false,"text":[{"text":"    let p = &mut foo;","highlight_start":13,"highlight_end":21}],"label":"borrow of `foo` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-match-already-borrowed.rs","byte_start":725,"byte_end":726,"line_start":25,"line_end":25,"column_start":16,"column_end":17,"is_primary":true,"text":[{"text":"        Foo::A(x) => x //[ast]~ ERROR [E0503]","highlight_start":16,"highlight_end":17}],"label":"use of borrowed `foo`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0503]: cannot use `foo.0` because it was mutably borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-match-already-borrowed.rs:25:16\n   |\n21 |     let p = &mut foo;\n   |             -------- borrow of `foo` occurs here\n...\n25 |         Foo::A(x) => x //[ast]~ ERROR [E0503]\n   |                ^ use of borrowed `foo`\n\n"}
{"message":"cannot use `x` because it was mutably borrowed","code":{"code":"E0503","explanation":"\nA value was used after it was mutably borrowed.\n\nExample of erroneous code:\n\n```compile_fail,E0503\nfn main() {\n    let mut value = 3;\n    // Create a mutable borrow of `value`. This borrow\n    // lives until the end of this function.\n    let _borrow = &mut value;\n    let _sum = value + 1; // error: cannot use `value` because\n                          //        it was mutably borrowed\n}\n```\n\nIn this example, `value` is mutably borrowed by `borrow` and cannot be\nused to calculate `sum`. This is not possible because this would violate\nRust's mutability rules.\n\nYou can fix this error by limiting the scope of the borrow:\n\n```\nfn main() {\n    let mut value = 3;\n    // By creating a new block, you can limit the scope\n    // of the reference.\n    {\n        let _borrow = &mut value; // Use `_borrow` inside this block.\n    }\n    // The block has ended and with it the borrow.\n    // You can now use `value` again.\n    let _sum = value + 1;\n}\n```\n\nOr by cloning `value` before borrowing it:\n\n```\nfn main() {\n    let mut value = 3;\n    // We clone `value`, creating a copy.\n    let value_cloned = value.clone();\n    // The mutable borrow is a reference to `value` and\n    // not to `value_cloned`...\n    let _borrow = &mut value;\n    // ... which means we can still use `value_cloned`,\n    let _sum = value_cloned + 1;\n    // even though the borrow only ends here.\n}\n```\n\nYou can find more information about borrowing in the rust-book:\nhttp://doc.rust-lang.org/stable/book/references-and-borrowing.html\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-match-already-borrowed.rs","byte_start":858,"byte_end":864,"line_start":33,"line_end":33,"column_start":14,"column_end":20,"is_primary":false,"text":[{"text":"    let _x = &mut x;","highlight_start":14,"highlight_end":20}],"label":"borrow of `x` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-match-already-borrowed.rs","byte_start":896,"byte_end":897,"line_start":35,"line_end":35,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        x => x + 1, //[ast]~ ERROR [E0503]","highlight_start":9,"highlight_end":10}],"label":"use of borrowed `x`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0503]: cannot use `x` because it was mutably borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-match-already-borrowed.rs:35:9\n   |\n33 |     let _x = &mut x;\n   |              ------ borrow of `x` occurs here\n34 |     let _ = match x {\n35 |         x => x + 1, //[ast]~ ERROR [E0503]\n   |         ^ use of borrowed `x`\n\n"}
{"message":"cannot use `x` because it was mutably borrowed","code":{"code":"E0503","explanation":"\nA value was used after it was mutably borrowed.\n\nExample of erroneous code:\n\n```compile_fail,E0503\nfn main() {\n    let mut value = 3;\n    // Create a mutable borrow of `value`. This borrow\n    // lives until the end of this function.\n    let _borrow = &mut value;\n    let _sum = value + 1; // error: cannot use `value` because\n                          //        it was mutably borrowed\n}\n```\n\nIn this example, `value` is mutably borrowed by `borrow` and cannot be\nused to calculate `sum`. This is not possible because this would violate\nRust's mutability rules.\n\nYou can fix this error by limiting the scope of the borrow:\n\n```\nfn main() {\n    let mut value = 3;\n    // By creating a new block, you can limit the scope\n    // of the reference.\n    {\n        let _borrow = &mut value; // Use `_borrow` inside this block.\n    }\n    // The block has ended and with it the borrow.\n    // You can now use `value` again.\n    let _sum = value + 1;\n}\n```\n\nOr by cloning `value` before borrowing it:\n\n```\nfn main() {\n    let mut value = 3;\n    // We clone `value`, creating a copy.\n    let value_cloned = value.clone();\n    // The mutable borrow is a reference to `value` and\n    // not to `value_cloned`...\n    let _borrow = &mut value;\n    // ... which means we can still use `value_cloned`,\n    let _sum = value_cloned + 1;\n    // even though the borrow only ends here.\n}\n```\n\nYou can find more information about borrowing in the rust-book:\nhttp://doc.rust-lang.org/stable/book/references-and-borrowing.html\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-match-already-borrowed.rs","byte_start":858,"byte_end":864,"line_start":33,"line_end":33,"column_start":14,"column_end":20,"is_primary":false,"text":[{"text":"    let _x = &mut x;","highlight_start":14,"highlight_end":20}],"label":"borrow of `x` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-match-already-borrowed.rs","byte_start":983,"byte_end":984,"line_start":37,"line_end":37,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        y => y + 2, //[ast]~ ERROR [E0503]","highlight_start":9,"highlight_end":10}],"label":"use of borrowed `x`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0503]: cannot use `x` because it was mutably borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-match-already-borrowed.rs:37:9\n   |\n33 |     let _x = &mut x;\n   |              ------ borrow of `x` occurs here\n...\n37 |         y => y + 2, //[ast]~ ERROR [E0503]\n   |         ^ use of borrowed `x`\n\n"}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 4 previous errors\n\n"}
