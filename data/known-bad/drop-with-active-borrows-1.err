{"message":"cannot move out of `a` because it is borrowed (Ast)","code":{"code":"E0505","explanation":"\nA value was moved out while it was still borrowed.\n\nErroneous code example:\n\n```compile_fail,E0505\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(x);\n    }\n}\n```\n\nHere, the function `eat` takes the ownership of `x`. However,\n`x` cannot be moved because it was borrowed to `_ref_to_val`.\nTo fix that you can do few different things:\n\n* Try to avoid moving the variable.\n* Release borrow before move.\n* Implement the `Copy` trait on the type.\n\nExamples:\n\n```\nstruct Value {}\n\nfn eat(val: &Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(&x); // pass by reference, if it's possible\n    }\n}\n```\n\nOr:\n\n```\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n    }\n    eat(x); // release borrow and then move it.\n}\n```\n\nOr:\n\n```\n#[derive(Clone, Copy)] // implement Copy trait\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(x); // it will be copied here.\n    }\n}\n```\n\nYou can find more information about borrowing in the rust-book:\nhttp://doc.rust-lang.org/stable/book/references-and-borrowing.html\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/drop-with-active-borrows-1.rs","byte_start":530,"byte_end":531,"line_start":13,"line_end":13,"column_start":24,"column_end":25,"is_primary":false,"text":[{"text":"    let b: Vec<&str> = a.lines().collect();","highlight_start":24,"highlight_end":25}],"label":"borrow of `a` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/drop-with-active-borrows-1.rs","byte_start":560,"byte_end":561,"line_start":14,"line_end":14,"column_start":10,"column_end":11,"is_primary":true,"text":[{"text":"    drop(a);    //~ ERROR cannot move out of `a` because it is borrowed","highlight_start":10,"highlight_end":11}],"label":"move out of `a` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot move out of `a` because it is borrowed (Mir)","code":{"code":"E0505","explanation":"\nA value was moved out while it was still borrowed.\n\nErroneous code example:\n\n```compile_fail,E0505\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(x);\n    }\n}\n```\n\nHere, the function `eat` takes the ownership of `x`. However,\n`x` cannot be moved because it was borrowed to `_ref_to_val`.\nTo fix that you can do few different things:\n\n* Try to avoid moving the variable.\n* Release borrow before move.\n* Implement the `Copy` trait on the type.\n\nExamples:\n\n```\nstruct Value {}\n\nfn eat(val: &Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(&x); // pass by reference, if it's possible\n    }\n}\n```\n\nOr:\n\n```\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n    }\n    eat(x); // release borrow and then move it.\n}\n```\n\nOr:\n\n```\n#[derive(Clone, Copy)] // implement Copy trait\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(x); // it will be copied here.\n    }\n}\n```\n\nYou can find more information about borrowing in the rust-book:\nhttp://doc.rust-lang.org/stable/book/references-and-borrowing.html\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/drop-with-active-borrows-1.rs","byte_start":530,"byte_end":531,"line_start":13,"line_end":13,"column_start":24,"column_end":25,"is_primary":false,"text":[{"text":"    let b: Vec<&str> = a.lines().collect();","highlight_start":24,"highlight_end":25}],"label":"borrow of `a` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/drop-with-active-borrows-1.rs","byte_start":560,"byte_end":561,"line_start":14,"line_end":14,"column_start":10,"column_end":11,"is_primary":true,"text":[{"text":"    drop(a);    //~ ERROR cannot move out of `a` because it is borrowed","highlight_start":10,"highlight_end":11}],"label":"move out of `a` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot assign twice to immutable variable `val` (Mir)","code":{"code":"E0384","explanation":"\nThis error occurs when an attempt is made to reassign an immutable variable.\nFor example:\n\n```compile_fail,E0384\nfn main() {\n    let x = 3;\n    x = 5; // error, reassignment of immutable variable\n}\n```\n\nBy default, variables in Rust are immutable. To fix this error, add the keyword\n`mut` after the keyword `let` when declaring the variable. For example:\n\n```\nfn main() {\n    let mut x = 3;\n    x = 5;\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/drop-with-active-borrows-1.rs","byte_start":627,"byte_end":674,"line_start":15,"line_end":17,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    for s in &b {","highlight_start":5,"highlight_end":18},{"text":"        println!(\"{}\", *s);","highlight_start":1,"highlight_end":28},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"cannot assign twice to immutable variable","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/drop-with-active-borrows-1.rs","byte_start":627,"byte_end":674,"line_start":15,"line_end":17,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    for s in &b {","highlight_start":5,"highlight_end":18},{"text":"        println!(\"{}\", *s);","highlight_start":1,"highlight_end":28},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"first assignment to `val`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot assign twice to immutable variable `s` (Mir)","code":{"code":"E0384","explanation":"\nThis error occurs when an attempt is made to reassign an immutable variable.\nFor example:\n\n```compile_fail,E0384\nfn main() {\n    let x = 3;\n    x = 5; // error, reassignment of immutable variable\n}\n```\n\nBy default, variables in Rust are immutable. To fix this error, add the keyword\n`mut` after the keyword `let` when declaring the variable. For example:\n\n```\nfn main() {\n    let mut x = 3;\n    x = 5;\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/drop-with-active-borrows-1.rs","byte_start":627,"byte_end":674,"line_start":15,"line_end":17,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    for s in &b {","highlight_start":5,"highlight_end":18},{"text":"        println!(\"{}\", *s);","highlight_start":1,"highlight_end":28},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"cannot assign twice to immutable variable","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/drop-with-active-borrows-1.rs","byte_start":627,"byte_end":674,"line_start":15,"line_end":17,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    for s in &b {","highlight_start":5,"highlight_end":18},{"text":"        println!(\"{}\", *s);","highlight_start":1,"highlight_end":28},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"first assignment to `s`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot assign twice to immutable variable `__arg0` (Mir)","code":{"code":"E0384","explanation":"\nThis error occurs when an attempt is made to reassign an immutable variable.\nFor example:\n\n```compile_fail,E0384\nfn main() {\n    let x = 3;\n    x = 5; // error, reassignment of immutable variable\n}\n```\n\nBy default, variables in Rust are immutable. To fix this error, add the keyword\n`mut` after the keyword `let` when declaring the variable. For example:\n\n```\nfn main() {\n    let mut x = 3;\n    x = 5;\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/drop-with-active-borrows-1.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"// Copyright 2012 The Rust Project Developers. See the COPYRIGHT","highlight_start":1,"highlight_end":1}],"label":"cannot assign twice to immutable variable","suggested_replacement":null,"expansion":{"span":{"file_name":"<print macros>","byte_start":54,"byte_end":85,"line_start":2,"line_end":2,"column_start":27,"column_end":58,"is_primary":false,"text":[{"text":"$ crate :: io :: _print ( format_args ! ( $ ( $ arg ) * ) ) ) ;","highlight_start":27,"highlight_end":58}],"label":null,"suggested_replacement":null,"expansion":{"span":{"file_name":"<println macros>","byte_start":138,"byte_end":191,"line_start":3,"line_end":3,"column_start":8,"column_end":61,"is_primary":false,"text":[{"text":") => ( print ! ( concat ! ( $ fmt , \"\\n\" ) , $ ( $ arg ) * ) ) ;","highlight_start":8,"highlight_end":61}],"label":null,"suggested_replacement":null,"expansion":{"span":{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/drop-with-active-borrows-1.rs","byte_start":649,"byte_end":668,"line_start":16,"line_end":16,"column_start":9,"column_end":28,"is_primary":false,"text":[{"text":"        println!(\"{}\", *s);","highlight_start":9,"highlight_end":28}],"label":null,"suggested_replacement":null,"expansion":null},"macro_decl_name":"println!","def_site_span":{"file_name":"<println macros>","byte_start":0,"byte_end":195,"line_start":1,"line_end":3,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"(  ) => ( print ! ( \"\\n\" ) ) ; ( $ fmt : expr ) => (","highlight_start":1,"highlight_end":53},{"text":"print ! ( concat ! ( $ fmt , \"\\n\" ) ) ) ; ( $ fmt : expr , $ ( $ arg : tt ) *","highlight_start":1,"highlight_end":78},{"text":") => ( print ! ( concat ! ( $ fmt , \"\\n\" ) , $ ( $ arg ) * ) ) ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"expansion":null}}},"macro_decl_name":"print!","def_site_span":{"file_name":"<print macros>","byte_start":0,"byte_end":91,"line_start":1,"line_end":2,"column_start":1,"column_end":64,"is_primary":false,"text":[{"text":"( $ ( $ arg : tt ) * ) => (","highlight_start":1,"highlight_end":28},{"text":"$ crate :: io :: _print ( format_args ! ( $ ( $ arg ) * ) ) ) ;","highlight_start":1,"highlight_end":64}],"label":null,"suggested_replacement":null,"expansion":null}}},"macro_decl_name":"format_args!","def_site_span":null}},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/drop-with-active-borrows-1.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"// Copyright 2012 The Rust Project Developers. See the COPYRIGHT","highlight_start":1,"highlight_end":1}],"label":"first assignment to `__arg0`","suggested_replacement":null,"expansion":{"span":{"file_name":"<print macros>","byte_start":54,"byte_end":85,"line_start":2,"line_end":2,"column_start":27,"column_end":58,"is_primary":false,"text":[{"text":"$ crate :: io :: _print ( format_args ! ( $ ( $ arg ) * ) ) ) ;","highlight_start":27,"highlight_end":58}],"label":null,"suggested_replacement":null,"expansion":{"span":{"file_name":"<println macros>","byte_start":138,"byte_end":191,"line_start":3,"line_end":3,"column_start":8,"column_end":61,"is_primary":false,"text":[{"text":") => ( print ! ( concat ! ( $ fmt , \"\\n\" ) , $ ( $ arg ) * ) ) ;","highlight_start":8,"highlight_end":61}],"label":null,"suggested_replacement":null,"expansion":{"span":{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/drop-with-active-borrows-1.rs","byte_start":649,"byte_end":668,"line_start":16,"line_end":16,"column_start":9,"column_end":28,"is_primary":false,"text":[{"text":"        println!(\"{}\", *s);","highlight_start":9,"highlight_end":28}],"label":null,"suggested_replacement":null,"expansion":null},"macro_decl_name":"println!","def_site_span":{"file_name":"<println macros>","byte_start":0,"byte_end":195,"line_start":1,"line_end":3,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"(  ) => ( print ! ( \"\\n\" ) ) ; ( $ fmt : expr ) => (","highlight_start":1,"highlight_end":53},{"text":"print ! ( concat ! ( $ fmt , \"\\n\" ) ) ) ; ( $ fmt : expr , $ ( $ arg : tt ) *","highlight_start":1,"highlight_end":78},{"text":") => ( print ! ( concat ! ( $ fmt , \"\\n\" ) , $ ( $ arg ) * ) ) ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"expansion":null}}},"macro_decl_name":"print!","def_site_span":{"file_name":"<print macros>","byte_start":0,"byte_end":91,"line_start":1,"line_end":2,"column_start":1,"column_end":64,"is_primary":false,"text":[{"text":"( $ ( $ arg : tt ) * ) => (","highlight_start":1,"highlight_end":28},{"text":"$ crate :: io :: _print ( format_args ! ( $ ( $ arg ) * ) ) ) ;","highlight_start":1,"highlight_end":64}],"label":null,"suggested_replacement":null,"expansion":null}}},"macro_decl_name":"format_args!","def_site_span":null}}],"children":[],"rendered":null}
{"message":"aborting due to 5 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":null}
