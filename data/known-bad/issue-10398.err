{"message":"use of moved value: `x` (Ast)","code":{"code":"E0382","explanation":"\nThis error occurs when an attempt is made to use a variable after its contents\nhave been moved elsewhere. For example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`.  Implicit\ncloning is more convienient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the chapter in the\nBook:\n\nhttps://doc.rust-lang.org/book/first-edition/ownership.html\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-10398.rs","byte_start":585,"byte_end":586,"line_start":17,"line_end":17,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"        drop(x);","highlight_start":14,"highlight_end":15}],"label":"value used here after move","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-10398.rs","byte_start":564,"byte_end":566,"line_start":16,"line_end":16,"column_start":13,"column_end":15,"is_primary":false,"text":[{"text":"        let _a = x;","highlight_start":13,"highlight_end":15}],"label":"value moved here","suggested_replacement":null,"expansion":null}],"children":[{"message":"move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":null}
{"message":"/home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:1607: End-user description not implemented for field access on `TyClosure(DefId { krate: CrateNum(0), index: DefIndex(1:9) => issue_10398[317d]::main[0]::{{closure}}[0] }, ClosureSubsts { substs: Slice([std::boxed::Box<i32>]) })`","code":null,"level":"error: internal compiler error","spans":[],"children":[],"rendered":null}
note: the compiler unexpectedly panicked. this is a bug.

note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports

note: rustc 1.23.0-dev running on x86_64-unknown-linux-gnu

note: run with `RUST_BACKTRACE=1` for a backtrace

thread 'rustc' panicked at 'Box<Any>', /home/ariel/Rust/rust-master/src/librustc_errors/lib.rs:485:8
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
stack backtrace:
   0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace
             at /home/ariel/Rust/rust-master/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1: std::sys_common::backtrace::_print
             at /home/ariel/Rust/rust-master/src/libstd/sys_common/backtrace.rs:68
   2: std::panicking::default_hook::{{closure}}
             at /home/ariel/Rust/rust-master/src/libstd/sys_common/backtrace.rs:57
             at /home/ariel/Rust/rust-master/src/libstd/panicking.rs:381
   3: std::panicking::default_hook
             at /home/ariel/Rust/rust-master/src/libstd/panicking.rs:391
   4: std::panicking::rust_panic_with_hook
             at /home/ariel/Rust/rust-master/src/libstd/panicking.rs:577
   5: std::panicking::begin_panic
             at /home/ariel/Rust/rust-master/src/libstd/panicking.rs:538
   6: rustc_errors::Handler::bug
             at /home/ariel/Rust/rust-master/src/librustc_errors/lib.rs:485
   7: rustc::session::opt_span_bug_fmt::{{closure}}
             at /home/ariel/Rust/rust-master/src/librustc/session/mod.rs:992
   8: rustc::session::opt_span_bug_fmt
             at /home/ariel/Rust/rust-master/src/librustc/ty/context.rs:0
   9: rustc::session::bug_fmt
             at /home/ariel/Rust/rust-master/src/librustc/session/mod.rs:972
  10: rustc_mir::borrow_check::MirBorrowckCtxt::describe_field_from_ty
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:1607
  11: rustc_mir::borrow_check::MirBorrowckCtxt::describe_field
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:0
  12: rustc_mir::borrow_check::MirBorrowckCtxt::append_lvalue_to_string
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:1515
  13: rustc_mir::borrow_check::MirBorrowckCtxt::report_use_of_moved_or_uninitialized
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:1488
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:1272
  14: rustc_mir::borrow_check::MirBorrowckCtxt::check_if_path_is_moved
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:0
  15: rustc_mir::borrow_check::MirBorrowckCtxt::consume_lvalue
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:616
  16: <rustc_mir::borrow_check::MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx> as rustc_mir::dataflow::DataflowResultsConsumer<'b, 'tcx>>::visit_statement_entry
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:585
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:541
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:245
  17: rustc_mir::borrow_check::do_mir_borrowck
             at /home/ariel/Rust/rust-master/src/librustc_mir/dataflow/mod.rs:309
             at /home/ariel/Rust/rust-master/src/librustc_mir/dataflow/mod.rs:299
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:147
  18: rustc_mir::borrow_check::mir_borrowck
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:64
             at /home/ariel/Rust/rust-master/src/librustc/infer/mod.rs:375
             at /home/ariel/Rust/rust-master/src/librustc/ty/context.rs:1522
             at /home/ariel/Rust/rust-master/src/libstd/thread/local.rs:377
             at /home/ariel/Rust/rust-master/src/libstd/thread/local.rs:288
             at /home/ariel/Rust/rust-master/src/librustc/ty/context.rs:1519
             at /home/ariel/Rust/rust-master/src/librustc/ty/context.rs:1330
             at /home/ariel/Rust/rust-master/src/librustc/infer/mod.rs:375
             at /home/ariel/Rust/rust-master/src/librustc_mir/borrow_check.rs:62
  19: rustc::dep_graph::graph::DepGraph::with_task_impl
             at /home/ariel/Rust/rust-master/src/librustc/ty/maps/plumbing.rs:370
             at /home/ariel/Rust/rust-master/src/librustc/dep_graph/graph.rs:273
  20: rustc::ty::maps::<impl rustc::ty::maps::queries::mir_borrowck<'tcx>>::force
             at /home/ariel/Rust/rust-master/src/librustc/dep_graph/graph.rs:189
             at /home/ariel/Rust/rust-master/src/librustc/ty/maps/plumbing.rs:452
             at /home/ariel/Rust/rust-master/src/librustc_errors/lib.rs:548
             at /home/ariel/Rust/rust-master/src/librustc/ty/maps/plumbing.rs:445
             at /home/ariel/Rust/rust-master/src/librustc/ty/maps/plumbing.rs:115
             at /home/ariel/Rust/rust-master/src/librustc/ty/maps/plumbing.rs:444
  21: rustc::ty::maps::<impl rustc::ty::maps::queries::mir_borrowck<'tcx>>::try_get
             at /home/ariel/Rust/rust-master/src/librustc/ty/maps/plumbing.rs:288
             at /home/ariel/Rust/rust-master/src/librustc/ty/maps/plumbing.rs:486
  22: rustc::ty::maps::TyCtxtAt::mir_borrowck
             at /home/ariel/Rust/rust-master/src/librustc/ty/maps/plumbing.rs:525
  23: rustc::ty::maps::<impl rustc::ty::context::TyCtxt<'a, 'tcx, 'lcx>>::mir_borrowck
             at /home/ariel/Rust/rust-master/src/librustc/ty/maps/plumbing.rs:518
  24: rustc_driver::driver::phase_3_run_analysis_passes::{{closure}}::{{closure}}
             at /home/ariel/Rust/rust-master/src/librustc_driver/driver.rs:1064
  25: rustc::ty::context::TyCtxt::create_and_enter
             at /home/ariel/Rust/rust-master/src/librustc/util/common.rs:120
             at /home/ariel/Rust/rust-master/src/librustc_driver/driver.rs:1062
             at /home/ariel/Rust/rust-master/src/librustc/ty/context.rs:1522
             at /home/ariel/Rust/rust-master/src/libstd/thread/local.rs:377
             at /home/ariel/Rust/rust-master/src/libstd/thread/local.rs:288
             at /home/ariel/Rust/rust-master/src/librustc/ty/context.rs:1519
             at /home/ariel/Rust/rust-master/src/librustc/ty/context.rs:1506
             at /home/ariel/Rust/rust-master/src/libstd/thread/local.rs:377
             at /home/ariel/Rust/rust-master/src/libstd/thread/local.rs:288
             at /home/ariel/Rust/rust-master/src/librustc/ty/context.rs:1503
             at /home/ariel/Rust/rust-master/src/librustc/ty/context.rs:1138
  26: rustc_driver::driver::compile_input
             at /home/ariel/Rust/rust-master/src/librustc_driver/driver.rs:1010
             at /home/ariel/Rust/rust-master/src/librustc_driver/driver.rs:209
  27: rustc_driver::run_compiler
             at /home/ariel/Rust/rust-master/src/librustc_driver/lib.rs:253

