{"message":"cannot assign to data in a captured outer variable in an `Fn` closure (Ast)","code":{"code":"E0387","explanation":"\nThis error occurs when an attempt is made to mutate or mutably reference data\nthat a closure has captured immutably. Examples of this error are shown below:\n\n```compile_fail,E0387\n// Accepts a function or a closure that captures its environment immutably.\n// Closures passed to foo will not be able to mutate their closed-over state.\nfn foo<F: Fn()>(f: F) { }\n\n// Attempts to mutate closed-over data. Error message reads:\n// `cannot assign to data in a captured outer variable...`\nfn mutable() {\n    let mut x = 0u32;\n    foo(|| x = 2);\n}\n\n// Attempts to take a mutable reference to closed-over data.  Error message\n// reads: `cannot borrow data mutably in a captured outer variable...`\nfn mut_addr() {\n    let mut x = 0u32;\n    foo(|| { let y = &mut x; });\n}\n```\n\nThe problem here is that foo is defined as accepting a parameter of type `Fn`.\nClosures passed into foo will thus be inferred to be of type `Fn`, meaning that\nthey capture their context immutably.\n\nIf the definition of `foo` is under your control, the simplest solution is to\ncapture the data mutably. This can be done by defining `foo` to take FnMut\nrather than Fn:\n\n```\nfn foo<F: FnMut()>(f: F) { }\n```\n\nAlternatively, we can consider using the `Cell` and `RefCell` types to achieve\ninterior mutability through a shared reference. Our example's `mutable`\nfunction could be redefined as below:\n\n```\nuse std::cell::Cell;\n\nfn foo<F: Fn()>(f: F) { }\n\nfn mutable() {\n    let x = Cell::new(0u32);\n    foo(|| x.set(2));\n}\n```\n\nYou can read more about cell types in the API documentation:\n\nhttps://doc.rust-lang.org/std/cell/\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/unboxed-closures-mutated-upvar-from-fn-closure.rs","byte_start":661,"byte_end":673,"line_start":21,"line_end":21,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"        counter += 1;","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[{"message":"consider changing this closure to take self by mutable reference","code":null,"level":"help","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/unboxed-closures-mutated-upvar-from-fn-closure.rs","byte_start":648,"byte_end":769,"line_start":20,"line_end":23,"column_start":10,"column_end":6,"is_primary":true,"text":[{"text":"    call(|| {","highlight_start":10,"highlight_end":14},{"text":"        counter += 1;","highlight_start":1,"highlight_end":22},{"text":"        //~^ ERROR cannot assign to data in a captured outer variable in an `Fn` closure","highlight_start":1,"highlight_end":89},{"text":"    });","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}],"rendered":null}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":null}
