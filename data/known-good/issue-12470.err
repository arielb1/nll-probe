{"message":"`*b` does not live long enough (Ast)","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/issue-12470.rs","byte_start":810,"byte_end":812,"line_start":38,"line_end":38,"column_start":19,"column_end":21,"is_primary":true,"text":[{"text":"    let bb: &B = &*b;    //~ ERROR does not live long enough","highlight_start":19,"highlight_end":21}],"label":"does not live long enough","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/issue-12470.rs","byte_start":868,"byte_end":869,"line_start":40,"line_end":40,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"borrowed value only lives until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"borrowed value must be valid for the lifetime 'a as defined on the function body at 36:1...","code":null,"level":"note","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/issue-12470.rs","byte_start":727,"byte_end":869,"line_start":36,"line_end":40,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn make_make_a<'a>() -> A<'a> {","highlight_start":1,"highlight_end":32},{"text":"    let b: Box<B> = box B {i:1};","highlight_start":1,"highlight_end":33},{"text":"    let bb: &B = &*b;    //~ ERROR does not live long enough","highlight_start":1,"highlight_end":61},{"text":"    make_a(bb)","highlight_start":1,"highlight_end":15},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}],"rendered":null}
{"message":"cannot move out of `b` because it is borrowed (Mir)","code":{"code":"E0505","explanation":"\nA value was moved out while it was still borrowed.\n\nErroneous code example:\n\n```compile_fail,E0505\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(x);\n    }\n}\n```\n\nHere, the function `eat` takes the ownership of `x`. However,\n`x` cannot be moved because it was borrowed to `_ref_to_val`.\nTo fix that you can do few different things:\n\n* Try to avoid moving the variable.\n* Release borrow before move.\n* Implement the `Copy` trait on the type.\n\nExamples:\n\n```\nstruct Value {}\n\nfn eat(val: &Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(&x); // pass by reference, if it's possible\n    }\n}\n```\n\nOr:\n\n```\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n    }\n    eat(x); // release borrow and then move it.\n}\n```\n\nOr:\n\n```\n#[derive(Clone, Copy)] // implement Copy trait\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(x); // it will be copied here.\n    }\n}\n```\n\nYou can find more information about borrowing in the rust-book:\nhttp://doc.rust-lang.org/stable/book/references-and-borrowing.html\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/issue-12470.rs","byte_start":809,"byte_end":812,"line_start":38,"line_end":38,"column_start":18,"column_end":21,"is_primary":false,"text":[{"text":"    let bb: &B = &*b;    //~ ERROR does not live long enough","highlight_start":18,"highlight_end":21}],"label":"borrow of `(*b)` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/issue-12470.rs","byte_start":869,"byte_end":869,"line_start":40,"line_end":40,"column_start":2,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":2,"highlight_end":2}],"label":"move out of `b` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":null}
