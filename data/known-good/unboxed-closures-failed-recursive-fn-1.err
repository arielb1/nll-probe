{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/unboxed-closures-failed-recursive-fn-1.rs","byte_start":1011,"byte_end":1024,"line_start":22,"line_end":22,"column_start":9,"column_end":22,"is_primary":false,"text":[{"text":"    let mut factorial: Option<Box<Fn(u32) -> u32>> = None;","highlight_start":9,"highlight_end":22}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/unboxed-closures-failed-recursive-fn-1.rs","byte_start":1279,"byte_end":1279,"line_start":31,"line_end":31,"column_start":2,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":2,"highlight_end":2}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/unboxed-closures-failed-recursive-fn-1.rs","byte_start":1278,"byte_end":1279,"line_start":31,"line_end":31,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/unboxed-closures-failed-recursive-fn-1.rs:31:2\n   |\n22 |     let mut factorial: Option<Box<Fn(u32) -> u32>> = None;\n   |         ------------- temporary value created here\n...\n31 | }\n   | -^ temporary value dropped here while still borrowed\n   | |\n   | temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"cannot assign to `factorial` because it is borrowed","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/unboxed-closures-failed-recursive-fn-1.rs","byte_start":1075,"byte_end":1240,"line_start":24,"line_end":28,"column_start":13,"column_end":6,"is_primary":false,"text":[{"text":"    let f = |x: u32| -> u32 {","highlight_start":13,"highlight_end":30},{"text":"        let g = factorial.as_ref().unwrap();","highlight_start":1,"highlight_end":45},{"text":"        //~^ ERROR `factorial` does not live long enough","highlight_start":1,"highlight_end":57},{"text":"        if x == 0 {1} else {x * g(x-1)}","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":"borrow of `factorial` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/unboxed-closures-failed-recursive-fn-1.rs","byte_start":1247,"byte_end":1256,"line_start":30,"line_end":30,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    factorial = Some(Box::new(f));","highlight_start":5,"highlight_end":14}],"label":"assignment to borrowed `factorial` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0506]: cannot assign to `factorial` because it is borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/unboxed-closures-failed-recursive-fn-1.rs:30:5\n   |\n24 |       let f = |x: u32| -> u32 {\n   |  _____________-\n25 | |         let g = factorial.as_ref().unwrap();\n26 | |         //~^ ERROR `factorial` does not live long enough\n27 | |         if x == 0 {1} else {x * g(x-1)}\n28 | |     };\n   | |_____- borrow of `factorial` occurs here\n29 | \n30 |       factorial = Some(Box::new(f));\n   |       ^^^^^^^^^ assignment to borrowed `factorial` occurs here\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/unboxed-closures-failed-recursive-fn-1.rs","byte_start":1298,"byte_end":1311,"line_start":34,"line_end":34,"column_start":9,"column_end":22,"is_primary":false,"text":[{"text":"    let mut factorial: Option<Box<Fn(u32) -> u32 + 'static>> = None;","highlight_start":9,"highlight_end":22}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/unboxed-closures-failed-recursive-fn-1.rs","byte_start":1606,"byte_end":1607,"line_start":43,"line_end":43,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/unboxed-closures-failed-recursive-fn-1.rs","byte_start":1606,"byte_end":1607,"line_start":43,"line_end":43,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/unboxed-closures-failed-recursive-fn-1.rs:43:1\n   |\n34 |     let mut factorial: Option<Box<Fn(u32) -> u32 + 'static>> = None;\n   |         ------------- temporary value created here\n...\n43 | }\n   | ^\n   | |\n   | temporary value dropped here while still borrowed\n   | temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"cannot assign to `factorial` because it is borrowed","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/unboxed-closures-failed-recursive-fn-1.rs","byte_start":1372,"byte_end":1568,"line_start":36,"line_end":40,"column_start":13,"column_end":6,"is_primary":false,"text":[{"text":"    let f = |x: u32| -> u32 {","highlight_start":13,"highlight_end":30},{"text":"        //~^ ERROR closure may outlive the current function, but it borrows `factorial`","highlight_start":1,"highlight_end":88},{"text":"        let g = factorial.as_ref().unwrap();","highlight_start":1,"highlight_end":45},{"text":"        if x == 0 {1} else {x * g(x-1)}","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":"borrow of `factorial` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/unboxed-closures-failed-recursive-fn-1.rs","byte_start":1575,"byte_end":1584,"line_start":42,"line_end":42,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    factorial = Some(Box::new(f));","highlight_start":5,"highlight_end":14}],"label":"assignment to borrowed `factorial` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0506]: cannot assign to `factorial` because it is borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/unboxed-closures-failed-recursive-fn-1.rs:42:5\n   |\n36 |       let f = |x: u32| -> u32 {\n   |  _____________-\n37 | |         //~^ ERROR closure may outlive the current function, but it borrows `factorial`\n38 | |         let g = factorial.as_ref().unwrap();\n39 | |         if x == 0 {1} else {x * g(x-1)}\n40 | |     };\n   | |_____- borrow of `factorial` occurs here\n41 | \n42 |       factorial = Some(Box::new(f));\n   |       ^^^^^^^^^ assignment to borrowed `factorial` occurs here\n\n"}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 4 previous errors\n\n"}
