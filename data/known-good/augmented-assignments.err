{"message":"cannot move out of `x` because it is borrowed","code":{"code":"E0505","explanation":"\nA value was moved out while it was still borrowed.\n\nErroneous code example:\n\n```compile_fail,E0505\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(x);\n    }\n}\n```\n\nHere, the function `eat` takes the ownership of `x`. However,\n`x` cannot be moved because it was borrowed to `_ref_to_val`.\nTo fix that you can do few different things:\n\n* Try to avoid moving the variable.\n* Release borrow before move.\n* Implement the `Copy` trait on the type.\n\nExamples:\n\n```\nstruct Value {}\n\nfn eat(val: &Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(&x); // pass by reference, if it's possible\n    }\n}\n```\n\nOr:\n\n```\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n    }\n    eat(x); // release borrow and then move it.\n}\n```\n\nOr:\n\n```\n#[derive(Clone, Copy)] // implement Copy trait\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(x); // it will be copied here.\n    }\n}\n```\n\nYou can find more information about borrowing in the rust-book:\nhttp://doc.rust-lang.org/stable/book/references-and-borrowing.html\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/augmented-assignments.rs","byte_start":649,"byte_end":650,"line_start":23,"line_end":23,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    x   //~ error: use of moved value: `x`","highlight_start":5,"highlight_end":6}],"label":"borrow of `x` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/augmented-assignments.rs","byte_start":789,"byte_end":790,"line_start":27,"line_end":27,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    x;  //~ value moved here","highlight_start":5,"highlight_end":6}],"label":"move out of `x` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0505]: cannot move out of `x` because it is borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/augmented-assignments.rs:27:5\n   |\n23 |     x   //~ error: use of moved value: `x`\n   |     - borrow of `x` occurs here\n...\n27 |     x;  //~ value moved here\n   |     ^ move out of `x` occurs here\n\n"}
{"message":"cannot borrow immutable item `y` as mutable","code":{"code":"E0596","explanation":"\nThis error occurs because you tried to mutably borrow a non-mutable variable.\n\nExample of erroneous code:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/augmented-assignments.rs","byte_start":882,"byte_end":883,"line_start":31,"line_end":31,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    y   //~ error: cannot borrow immutable local variable `y` as mutable","highlight_start":5,"highlight_end":6}],"label":"cannot borrow as mutable","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0596]: cannot borrow immutable item `y` as mutable\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/augmented-assignments.rs:31:5\n   |\n31 |     y   //~ error: cannot borrow immutable local variable `y` as mutable\n   |     ^ cannot borrow as mutable\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 2 previous errors\n\n"}
