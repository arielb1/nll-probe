{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-big.rs","byte_start":1927,"byte_end":1928,"line_start":76,"line_end":76,"column_start":35,"column_end":36,"is_primary":false,"text":[{"text":"    let mut w = WrapA::new().set(|x: usize, y: usize| {","highlight_start":35,"highlight_end":36}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-big.rs","byte_start":2153,"byte_end":2154,"line_start":80,"line_end":80,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    });","highlight_start":5,"highlight_end":6}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-big.rs","byte_start":2153,"byte_end":2154,"line_start":80,"line_end":80,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    });","highlight_start":5,"highlight_end":6}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-big.rs:80:5\n   |\n76 |     let mut w = WrapA::new().set(|x: usize, y: usize| {\n   |                                   - temporary value created here\n...\n80 |     });\n   |     ^\n   |     |\n   |     temporary value dropped here while still borrowed\n   |     temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-big.rs","byte_start":1937,"byte_end":1938,"line_start":76,"line_end":76,"column_start":45,"column_end":46,"is_primary":false,"text":[{"text":"    let mut w = WrapA::new().set(|x: usize, y: usize| {","highlight_start":45,"highlight_end":46}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-big.rs","byte_start":2153,"byte_end":2154,"line_start":80,"line_end":80,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    });","highlight_start":5,"highlight_end":6}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-big.rs","byte_start":2153,"byte_end":2154,"line_start":80,"line_end":80,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    });","highlight_start":5,"highlight_end":6}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-big.rs:80:5\n   |\n76 |     let mut w = WrapA::new().set(|x: usize, y: usize| {\n   |                                             - temporary value created here\n...\n80 |     });\n   |     ^\n   |     |\n   |     temporary value dropped here while still borrowed\n   |     temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 2 previous errors\n\n"}
