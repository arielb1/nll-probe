{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":680,"byte_end":681,"line_start":18,"line_end":18,"column_start":14,"column_end":15,"is_primary":false,"text":[{"text":"    let g = |x: usize, y:usize| {","highlight_start":14,"highlight_end":15}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":1244,"byte_end":1245,"line_start":29,"line_end":29,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    };","highlight_start":5,"highlight_end":6}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":1244,"byte_end":1245,"line_start":29,"line_end":29,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    };","highlight_start":5,"highlight_end":6}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:29:5\n   |\n18 |     let g = |x: usize, y:usize| {\n   |              - temporary value created here\n...\n29 |     };\n   |     ^\n   |     |\n   |     temporary value dropped here while still borrowed\n   |     temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":690,"byte_end":691,"line_start":18,"line_end":18,"column_start":24,"column_end":25,"is_primary":false,"text":[{"text":"    let g = |x: usize, y:usize| {","highlight_start":24,"highlight_end":25}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":1244,"byte_end":1245,"line_start":29,"line_end":29,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    };","highlight_start":5,"highlight_end":6}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":1244,"byte_end":1245,"line_start":29,"line_end":29,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    };","highlight_start":5,"highlight_end":6}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:29:5\n   |\n18 |     let g = |x: usize, y:usize| {\n   |                        - temporary value created here\n...\n29 |     };\n   |     ^\n   |     |\n   |     temporary value dropped here while still borrowed\n   |     temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":1628,"byte_end":1629,"line_start":41,"line_end":41,"column_start":14,"column_end":15,"is_primary":false,"text":[{"text":"    let g = |x: usize, y:usize| {","highlight_start":14,"highlight_end":15}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":2184,"byte_end":2185,"line_start":52,"line_end":52,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    };","highlight_start":5,"highlight_end":6}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":2184,"byte_end":2185,"line_start":52,"line_end":52,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    };","highlight_start":5,"highlight_end":6}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:52:5\n   |\n41 |     let g = |x: usize, y:usize| {\n   |              - temporary value created here\n...\n52 |     };\n   |     ^\n   |     |\n   |     temporary value dropped here while still borrowed\n   |     temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":1638,"byte_end":1639,"line_start":41,"line_end":41,"column_start":24,"column_end":25,"is_primary":false,"text":[{"text":"    let g = |x: usize, y:usize| {","highlight_start":24,"highlight_end":25}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":2184,"byte_end":2185,"line_start":52,"line_end":52,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    };","highlight_start":5,"highlight_end":6}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":2184,"byte_end":2185,"line_start":52,"line_end":52,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    };","highlight_start":5,"highlight_end":6}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:52:5\n   |\n41 |     let g = |x: usize, y:usize| {\n   |                        - temporary value created here\n...\n52 |     };\n   |     ^\n   |     |\n   |     temporary value dropped here while still borrowed\n   |     temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":2900,"byte_end":2901,"line_start":80,"line_end":80,"column_start":14,"column_end":15,"is_primary":false,"text":[{"text":"    fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {","highlight_start":14,"highlight_end":15}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":3295,"byte_end":3296,"line_start":89,"line_end":89,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    };","highlight_start":5,"highlight_end":6}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":3295,"byte_end":3296,"line_start":89,"line_end":89,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    };","highlight_start":5,"highlight_end":6}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:89:5\n   |\n80 |     fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n   |              - temporary value created here\n...\n89 |     };\n   |     ^\n   |     |\n   |     temporary value dropped here while still borrowed\n   |     temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":2910,"byte_end":2911,"line_start":80,"line_end":80,"column_start":24,"column_end":25,"is_primary":false,"text":[{"text":"    fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {","highlight_start":24,"highlight_end":25}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":3295,"byte_end":3296,"line_start":89,"line_end":89,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    };","highlight_start":5,"highlight_end":6}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":3295,"byte_end":3296,"line_start":89,"line_end":89,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    };","highlight_start":5,"highlight_end":6}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:89:5\n   |\n80 |     fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n   |                        - temporary value created here\n...\n89 |     };\n   |     ^\n   |     |\n   |     temporary value dropped here while still borrowed\n   |     temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":3391,"byte_end":3392,"line_start":95,"line_end":95,"column_start":14,"column_end":15,"is_primary":false,"text":[{"text":"    fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {","highlight_start":14,"highlight_end":15}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":3778,"byte_end":3779,"line_start":104,"line_end":104,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    };","highlight_start":5,"highlight_end":6}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":3778,"byte_end":3779,"line_start":104,"line_end":104,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    };","highlight_start":5,"highlight_end":6}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n   --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:104:5\n    |\n95  |     fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n    |              - temporary value created here\n...\n104 |     };\n    |     ^\n    |     |\n    |     temporary value dropped here while still borrowed\n    |     temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":3401,"byte_end":3402,"line_start":95,"line_end":95,"column_start":24,"column_end":25,"is_primary":false,"text":[{"text":"    fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {","highlight_start":24,"highlight_end":25}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":3778,"byte_end":3779,"line_start":104,"line_end":104,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    };","highlight_start":5,"highlight_end":6}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":3778,"byte_end":3779,"line_start":104,"line_end":104,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    };","highlight_start":5,"highlight_end":6}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n   --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:104:5\n    |\n95  |     fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n    |                        - temporary value created here\n...\n104 |     };\n    |     ^\n    |     |\n    |     temporary value dropped here while still borrowed\n    |     temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":4221,"byte_end":4222,"line_start":123,"line_end":123,"column_start":25,"column_end":26,"is_primary":false,"text":[{"text":"        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {","highlight_start":25,"highlight_end":26}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":4652,"byte_end":4653,"line_start":132,"line_end":132,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":4652,"byte_end":4653,"line_start":132,"line_end":132,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n   --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:132:9\n    |\n123 |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n    |                         - temporary value created here\n...\n132 |         }\n    |         ^\n    |         |\n    |         temporary value dropped here while still borrowed\n    |         temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":4231,"byte_end":4232,"line_start":123,"line_end":123,"column_start":35,"column_end":36,"is_primary":false,"text":[{"text":"        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {","highlight_start":35,"highlight_end":36}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":4652,"byte_end":4653,"line_start":132,"line_end":132,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":4652,"byte_end":4653,"line_start":132,"line_end":132,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n   --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:132:9\n    |\n123 |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n    |                                   - temporary value created here\n...\n132 |         }\n    |         ^\n    |         |\n    |         temporary value dropped here while still borrowed\n    |         temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":4795,"byte_end":4796,"line_start":141,"line_end":141,"column_start":25,"column_end":26,"is_primary":false,"text":[{"text":"        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {","highlight_start":25,"highlight_end":26}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":5218,"byte_end":5219,"line_start":150,"line_end":150,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":5218,"byte_end":5219,"line_start":150,"line_end":150,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n   --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:150:9\n    |\n141 |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n    |                         - temporary value created here\n...\n150 |         }\n    |         ^\n    |         |\n    |         temporary value dropped here while still borrowed\n    |         temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":4805,"byte_end":4806,"line_start":141,"line_end":141,"column_start":35,"column_end":36,"is_primary":false,"text":[{"text":"        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {","highlight_start":35,"highlight_end":36}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":5218,"byte_end":5219,"line_start":150,"line_end":150,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":5218,"byte_end":5219,"line_start":150,"line_end":150,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n   --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:150:9\n    |\n141 |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n    |                                   - temporary value created here\n...\n150 |         }\n    |         ^\n    |         |\n    |         temporary value dropped here while still borrowed\n    |         temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":5821,"byte_end":5822,"line_start":173,"line_end":173,"column_start":25,"column_end":26,"is_primary":false,"text":[{"text":"        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {","highlight_start":25,"highlight_end":26}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":6252,"byte_end":6253,"line_start":182,"line_end":182,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":6252,"byte_end":6253,"line_start":182,"line_end":182,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n   --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:182:9\n    |\n173 |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n    |                         - temporary value created here\n...\n182 |         }\n    |         ^\n    |         |\n    |         temporary value dropped here while still borrowed\n    |         temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":5831,"byte_end":5832,"line_start":173,"line_end":173,"column_start":35,"column_end":36,"is_primary":false,"text":[{"text":"        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {","highlight_start":35,"highlight_end":36}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":6252,"byte_end":6253,"line_start":182,"line_end":182,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":6252,"byte_end":6253,"line_start":182,"line_end":182,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n   --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:182:9\n    |\n173 |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n    |                                   - temporary value created here\n...\n182 |         }\n    |         ^\n    |         |\n    |         temporary value dropped here while still borrowed\n    |         temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":6488,"byte_end":6489,"line_start":192,"line_end":192,"column_start":25,"column_end":26,"is_primary":false,"text":[{"text":"        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {","highlight_start":25,"highlight_end":26}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":6911,"byte_end":6912,"line_start":201,"line_end":201,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":6911,"byte_end":6912,"line_start":201,"line_end":201,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n   --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:201:9\n    |\n192 |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n    |                         - temporary value created here\n...\n201 |         }\n    |         ^\n    |         |\n    |         temporary value dropped here while still borrowed\n    |         temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":6498,"byte_end":6499,"line_start":192,"line_end":192,"column_start":35,"column_end":36,"is_primary":false,"text":[{"text":"        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {","highlight_start":35,"highlight_end":36}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":6911,"byte_end":6912,"line_start":201,"line_end":201,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":6911,"byte_end":6912,"line_start":201,"line_end":201,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n   --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:201:9\n    |\n192 |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n    |                                   - temporary value created here\n...\n201 |         }\n    |         ^\n    |         |\n    |         temporary value dropped here while still borrowed\n    |         temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":7525,"byte_end":7526,"line_start":224,"line_end":224,"column_start":25,"column_end":26,"is_primary":false,"text":[{"text":"        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {","highlight_start":25,"highlight_end":26}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":7956,"byte_end":7957,"line_start":233,"line_end":233,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":7956,"byte_end":7957,"line_start":233,"line_end":233,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n   --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:233:9\n    |\n224 |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n    |                         - temporary value created here\n...\n233 |         }\n    |         ^\n    |         |\n    |         temporary value dropped here while still borrowed\n    |         temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":7535,"byte_end":7536,"line_start":224,"line_end":224,"column_start":35,"column_end":36,"is_primary":false,"text":[{"text":"        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {","highlight_start":35,"highlight_end":36}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":7956,"byte_end":7957,"line_start":233,"line_end":233,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":7956,"byte_end":7957,"line_start":233,"line_end":233,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n   --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:233:9\n    |\n224 |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n    |                                   - temporary value created here\n...\n233 |         }\n    |         ^\n    |         |\n    |         temporary value dropped here while still borrowed\n    |         temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":8126,"byte_end":8127,"line_start":242,"line_end":242,"column_start":25,"column_end":26,"is_primary":false,"text":[{"text":"        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {","highlight_start":25,"highlight_end":26}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":8549,"byte_end":8550,"line_start":251,"line_end":251,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":8549,"byte_end":8550,"line_start":251,"line_end":251,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n   --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:251:9\n    |\n242 |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n    |                         - temporary value created here\n...\n251 |         }\n    |         ^\n    |         |\n    |         temporary value dropped here while still borrowed\n    |         temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":8136,"byte_end":8137,"line_start":242,"line_end":242,"column_start":35,"column_end":36,"is_primary":false,"text":[{"text":"        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {","highlight_start":35,"highlight_end":36}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":8549,"byte_end":8550,"line_start":251,"line_end":251,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs","byte_start":8549,"byte_end":8550,"line_start":251,"line_end":251,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n   --> /home/ariel/Rust/rust-master/src/test/compile-fail/region-borrow-params-issue-29793-small.rs:251:9\n    |\n242 |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n    |                                   - temporary value created here\n...\n251 |         }\n    |         ^\n    |         |\n    |         temporary value dropped here while still borrowed\n    |         temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"aborting due to 20 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 20 previous errors\n\n"}
