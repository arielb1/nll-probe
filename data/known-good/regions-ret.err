{"message":"borrowed value does not live long enough (Ast)","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/regions-ret.rs","byte_start":535,"byte_end":540,"line_start":14,"line_end":14,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"    return &id(3); //~ ERROR borrowed value does not live long enough","highlight_start":13,"highlight_end":18}],"label":"does not live long enough","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/regions-ret.rs","byte_start":540,"byte_end":541,"line_start":14,"line_end":14,"column_start":18,"column_end":19,"is_primary":false,"text":[{"text":"    return &id(3); //~ ERROR borrowed value does not live long enough","highlight_start":18,"highlight_end":19}],"label":"temporary value only lives until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 13:1...","code":null,"level":"note","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/regions-ret.rs","byte_start":494,"byte_end":594,"line_start":13,"line_end":15,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn f(_x: &isize) -> &isize {","highlight_start":1,"highlight_end":29},{"text":"    return &id(3); //~ ERROR borrowed value does not live long enough","highlight_start":1,"highlight_end":70},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":null}
{"message":"cannot assign to `_` because it is borrowed (Mir)","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/regions-ret.rs","byte_start":534,"byte_end":540,"line_start":14,"line_end":14,"column_start":12,"column_end":18,"is_primary":false,"text":[{"text":"    return &id(3); //~ ERROR borrowed value does not live long enough","highlight_start":12,"highlight_end":18}],"label":"borrow of `_` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/regions-ret.rs","byte_start":541,"byte_end":541,"line_start":14,"line_end":14,"column_start":19,"column_end":19,"is_primary":true,"text":[{"text":"    return &id(3); //~ ERROR borrowed value does not live long enough","highlight_start":19,"highlight_end":19}],"label":"assignment to borrowed `_` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":null}
