{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":897,"byte_end":908,"line_start":36,"line_end":36,"column_start":19,"column_end":30,"is_primary":false,"text":[{"text":"    let _x = arg(&AddFlags(1)); //~ ERROR value does not live long enough","highlight_start":19,"highlight_end":30}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":910,"byte_end":910,"line_start":36,"line_end":36,"column_start":32,"column_end":32,"is_primary":true,"text":[{"text":"    let _x = arg(&AddFlags(1)); //~ ERROR value does not live long enough","highlight_start":32,"highlight_end":32}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":1431,"byte_end":1432,"line_start":43,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs:36:32\n   |\n36 |     let _x = arg(&AddFlags(1)); //~ ERROR value does not live long enough\n   |                   -----------  ^ temporary value dropped here while still borrowed\n   |                   |\n   |                   temporary value created here\n...\n43 | }\n   | - temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":966,"byte_end":977,"line_start":37,"line_end":37,"column_start":14,"column_end":25,"is_primary":false,"text":[{"text":"    let _x = AddFlags(1).get(); //~ ERROR value does not live long enough","highlight_start":14,"highlight_end":25}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":984,"byte_end":984,"line_start":37,"line_end":37,"column_start":32,"column_end":32,"is_primary":true,"text":[{"text":"    let _x = AddFlags(1).get(); //~ ERROR value does not live long enough","highlight_start":32,"highlight_end":32}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":1431,"byte_end":1432,"line_start":43,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs:37:32\n   |\n37 |     let _x = AddFlags(1).get(); //~ ERROR value does not live long enough\n   |              -----------       ^ temporary value dropped here while still borrowed\n   |              |\n   |              temporary value created here\n...\n43 | }\n   | - temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":1047,"byte_end":1058,"line_start":38,"line_end":38,"column_start":21,"column_end":32,"is_primary":false,"text":[{"text":"    let _x = &*arg(&AddFlags(1)); //~ ERROR value does not live long enough","highlight_start":21,"highlight_end":32}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":1060,"byte_end":1060,"line_start":38,"line_end":38,"column_start":34,"column_end":34,"is_primary":true,"text":[{"text":"    let _x = &*arg(&AddFlags(1)); //~ ERROR value does not live long enough","highlight_start":34,"highlight_end":34}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":1431,"byte_end":1432,"line_start":43,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs:38:34\n   |\n38 |     let _x = &*arg(&AddFlags(1)); //~ ERROR value does not live long enough\n   |                     -----------  ^ temporary value dropped here while still borrowed\n   |                     |\n   |                     temporary value created here\n...\n43 | }\n   | - temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":1126,"byte_end":1137,"line_start":39,"line_end":39,"column_start":24,"column_end":35,"is_primary":false,"text":[{"text":"    let ref _x = *arg(&AddFlags(1)); //~ ERROR value does not live long enough","highlight_start":24,"highlight_end":35}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":1139,"byte_end":1139,"line_start":39,"line_end":39,"column_start":37,"column_end":37,"is_primary":true,"text":[{"text":"    let ref _x = *arg(&AddFlags(1)); //~ ERROR value does not live long enough","highlight_start":37,"highlight_end":37}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":1431,"byte_end":1432,"line_start":43,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs:39:37\n   |\n39 |     let ref _x = *arg(&AddFlags(1)); //~ ERROR value does not live long enough\n   |                        -----------  ^ temporary value dropped here while still borrowed\n   |                        |\n   |                        temporary value created here\n...\n43 | }\n   | - temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":1205,"byte_end":1216,"line_start":40,"line_end":40,"column_start":24,"column_end":35,"is_primary":false,"text":[{"text":"    let &ref _x = arg(&AddFlags(1)); //~ ERROR value does not live long enough","highlight_start":24,"highlight_end":35}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":1218,"byte_end":1218,"line_start":40,"line_end":40,"column_start":37,"column_end":37,"is_primary":true,"text":[{"text":"    let &ref _x = arg(&AddFlags(1)); //~ ERROR value does not live long enough","highlight_start":37,"highlight_end":37}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":1431,"byte_end":1432,"line_start":43,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs:40:37\n   |\n40 |     let &ref _x = arg(&AddFlags(1)); //~ ERROR value does not live long enough\n   |                        -----------  ^ temporary value dropped here while still borrowed\n   |                        |\n   |                        temporary value created here\n...\n43 | }\n   | - temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":1274,"byte_end":1285,"line_start":41,"line_end":41,"column_start":14,"column_end":25,"is_primary":false,"text":[{"text":"    let _x = AddFlags(1).get(); //~ ERROR value does not live long enough","highlight_start":14,"highlight_end":25}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":1292,"byte_end":1292,"line_start":41,"line_end":41,"column_start":32,"column_end":32,"is_primary":true,"text":[{"text":"    let _x = AddFlags(1).get(); //~ ERROR value does not live long enough","highlight_start":32,"highlight_end":32}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":1431,"byte_end":1432,"line_start":43,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs:41:32\n   |\n41 |     let _x = AddFlags(1).get(); //~ ERROR value does not live long enough\n   |              -----------       ^ temporary value dropped here while still borrowed\n   |              |\n   |              temporary value created here\n42 |     let Box { f: _x } = Box { f: AddFlags(1).get() }; //~ ERROR value does not live long enough\n43 | }\n   | - temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":1368,"byte_end":1379,"line_start":42,"line_end":42,"column_start":34,"column_end":45,"is_primary":false,"text":[{"text":"    let Box { f: _x } = Box { f: AddFlags(1).get() }; //~ ERROR value does not live long enough","highlight_start":34,"highlight_end":45}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":1388,"byte_end":1388,"line_start":42,"line_end":42,"column_start":54,"column_end":54,"is_primary":true,"text":[{"text":"    let Box { f: _x } = Box { f: AddFlags(1).get() }; //~ ERROR value does not live long enough","highlight_start":54,"highlight_end":54}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs","byte_start":1431,"byte_end":1432,"line_start":43,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/cleanup-rvalue-scopes-cf.rs:42:54\n   |\n42 |     let Box { f: _x } = Box { f: AddFlags(1).get() }; //~ ERROR value does not live long enough\n   |                                  -----------         ^ temporary value dropped here while still borrowed\n   |                                  |\n   |                                  temporary value created here\n43 | }\n   | - temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"aborting due to 7 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 7 previous errors\n\n"}
