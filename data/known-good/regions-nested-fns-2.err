{"message":"closure may outlive the current function, but it borrows `y`, which is owned by the current function (Ast)","code":{"code":"E0373","explanation":"\nThis error occurs when an attempt is made to use data captured by a closure,\nwhen that data may no longer exist. It's most commonly seen when attempting to\nreturn a closure:\n\n```compile_fail,E0373\nfn foo() -> Box<Fn(u32) -> u32> {\n    let x = 0u32;\n    Box::new(|y| x + y)\n}\n```\n\nNotice that `x` is stack-allocated by `foo()`. By default, Rust captures\nclosed-over data by reference. This means that once `foo()` returns, `x` no\nlonger exists. An attempt to access `x` within the closure would thus be\nunsafe.\n\nAnother situation where this might be encountered is when spawning threads:\n\n```compile_fail,E0373\nfn foo() {\n    let x = 0u32;\n    let y = 1u32;\n\n    let thr = std::thread::spawn(|| {\n        x + y\n    });\n}\n```\n\nSince our new thread runs in parallel, the stack frame containing `x` and `y`\nmay well have disappeared by the time we try to use them. Even if we call\n`thr.join()` within foo (which blocks until `thr` has completed, ensuring the\nstack frame won't disappear), we will not succeed: the compiler cannot prove\nthat this behaviour is safe, and so won't let us do it.\n\nThe solution to this problem is usually to switch to using a `move` closure.\nThis approach moves (or copies, where possible) data into the closure, rather\nthan taking references to it. For example:\n\n```\nfn foo() -> Box<Fn(u32) -> u32> {\n    let x = 0u32;\n    Box::new(move |y| x + y)\n}\n```\n\nNow that the closure has its own copy of the data, there's no need to worry\nabout safety.\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/regions-nested-fns-2.rs","byte_start":700,"byte_end":701,"line_start":19,"line_end":19,"column_start":25,"column_end":26,"is_primary":false,"text":[{"text":"            if false { &y } else { z }","highlight_start":25,"highlight_end":26}],"label":"`y` is borrowed here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/regions-nested-fns-2.rs","byte_start":588,"byte_end":591,"line_start":16,"line_end":16,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        |z| {","highlight_start":9,"highlight_end":12}],"label":"may outlive borrowed value `y`","suggested_replacement":null,"expansion":null}],"children":[{"message":"to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword","code":null,"level":"help","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/regions-nested-fns-2.rs","byte_start":588,"byte_end":591,"line_start":16,"line_end":16,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        |z| {","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"move |z|","expansion":null}],"children":[],"rendered":null}],"rendered":null}
{"message":"cannot assign to `y` because it is borrowed (Mir)","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/regions-nested-fns-2.rs","byte_start":588,"byte_end":767,"line_start":16,"line_end":21,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        |z| {","highlight_start":9,"highlight_end":14},{"text":"            //~^ ERROR E0373","highlight_start":1,"highlight_end":29},{"text":"            //~| NOTE may outlive borrowed value `y`","highlight_start":1,"highlight_end":53},{"text":"            if false { &y } else { z }","highlight_start":1,"highlight_end":39},{"text":"            //~^ NOTE `y` is borrowed here","highlight_start":1,"highlight_end":43},{"text":"        });","highlight_start":1,"highlight_end":10}],"label":"borrow of `y` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/regions-nested-fns-2.rs","byte_start":771,"byte_end":771,"line_start":22,"line_end":22,"column_start":2,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":2,"highlight_end":2}],"label":"assignment to borrowed `y` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":null}
