{"message":"use of possibly uninitialized variable: `cfg_res` (Ast)","code":{"code":"E0381","explanation":"\nIt is not allowed to use or capture an uninitialized variable. For example:\n\n```compile_fail,E0381\nfn main() {\n    let x: i32;\n    let y = x; // error, use of possibly uninitialized variable\n}\n```\n\nTo fix this, ensure that any declared variables are initialized before being\nused. Example:\n\n```\nfn main() {\n    let x: i32 = 0;\n    let y = x; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/catch-opt-init.rs","byte_start":725,"byte_end":732,"line_start":24,"line_end":24,"column_start":16,"column_end":23,"is_primary":true,"text":[{"text":"    assert_eq!(cfg_res, 5); //~ ERROR use of possibly uninitialized variable","highlight_start":16,"highlight_end":23}],"label":"use of possibly uninitialized `cfg_res`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"borrow of possibly uninitialized variable: `cfg_res` (Mir)","code":{"code":"E0381","explanation":"\nIt is not allowed to use or capture an uninitialized variable. For example:\n\n```compile_fail,E0381\nfn main() {\n    let x: i32;\n    let y = x; // error, use of possibly uninitialized variable\n}\n```\n\nTo fix this, ensure that any declared variables are initialized before being\nused. Example:\n\n```\nfn main() {\n    let x: i32 = 0;\n    let y = x; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"<assert_eq macros>","byte_start":50,"byte_end":58,"line_start":3,"line_end":3,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"match ( & $ left , & $ right ) {","highlight_start":9,"highlight_end":17}],"label":"use of possibly uninitialized `cfg_res`","suggested_replacement":null,"expansion":{"span":{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/catch-opt-init.rs","byte_start":714,"byte_end":737,"line_start":24,"line_end":24,"column_start":5,"column_end":28,"is_primary":false,"text":[{"text":"    assert_eq!(cfg_res, 5); //~ ERROR use of possibly uninitialized variable","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"<assert_eq macros>","byte_start":0,"byte_end":588,"line_start":1,"line_end":20,"column_start":1,"column_end":69,"is_primary":false,"text":[{"text":"( $ left : expr , $ right : expr ) => (","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"match ( & $ left , & $ right ) {","highlight_start":1,"highlight_end":33},{"text":"( left_val , right_val ) => {","highlight_start":1,"highlight_end":30},{"text":"if ! ( * left_val == * right_val ) {","highlight_start":1,"highlight_end":37},{"text":"panic ! (","highlight_start":1,"highlight_end":10},{"text":"r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":39},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"# ,","highlight_start":1,"highlight_end":19},{"text":"left_val , right_val ) } } } } ) ; (","highlight_start":1,"highlight_end":37},{"text":"$ left : expr , $ right : expr , $ ( $ arg : tt ) + ) => (","highlight_start":1,"highlight_end":59},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"match ( & ( $ left ) , & ( $ right ) ) {","highlight_start":1,"highlight_end":41},{"text":"( left_val , right_val ) => {","highlight_start":1,"highlight_end":30},{"text":"if ! ( * left_val == * right_val ) {","highlight_start":1,"highlight_end":37},{"text":"panic ! (","highlight_start":1,"highlight_end":10},{"text":"r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":39},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"# ,","highlight_start":1,"highlight_end":23},{"text":"left_val , right_val , format_args ! ( $ ( $ arg ) + ) ) } } } } ) ;","highlight_start":1,"highlight_end":69}],"label":null,"suggested_replacement":null,"expansion":null}}}],"children":[],"rendered":null}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":null}
