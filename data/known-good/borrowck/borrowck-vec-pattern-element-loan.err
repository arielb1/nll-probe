{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-vec-pattern-element-loan.rs","byte_start":569,"byte_end":572,"line_start":15,"line_end":15,"column_start":9,"column_end":12,"is_primary":false,"text":[{"text":"    let vec = vec![1, 2, 3, 4];","highlight_start":9,"highlight_end":12}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-vec-pattern-element-loan.rs","byte_start":761,"byte_end":762,"line_start":22,"line_end":22,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-vec-pattern-element-loan.rs","byte_start":761,"byte_end":762,"line_start":22,"line_end":22,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-vec-pattern-element-loan.rs:22:1\n   |\n15 |     let vec = vec![1, 2, 3, 4];\n   |         --- temporary value created here\n...\n22 | }\n   | ^\n   | |\n   | temporary value dropped here while still borrowed\n   | temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-vec-pattern-element-loan.rs","byte_start":800,"byte_end":803,"line_start":25,"line_end":25,"column_start":9,"column_end":12,"is_primary":false,"text":[{"text":"    let vec = vec![1, 2, 3, 4];","highlight_start":9,"highlight_end":12}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-vec-pattern-element-loan.rs","byte_start":992,"byte_end":993,"line_start":32,"line_end":32,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-vec-pattern-element-loan.rs","byte_start":992,"byte_end":993,"line_start":32,"line_end":32,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-vec-pattern-element-loan.rs:32:1\n   |\n25 |     let vec = vec![1, 2, 3, 4];\n   |         --- temporary value created here\n...\n32 | }\n   | ^\n   | |\n   | temporary value dropped here while still borrowed\n   | temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-vec-pattern-element-loan.rs","byte_start":1031,"byte_end":1034,"line_start":35,"line_end":35,"column_start":9,"column_end":12,"is_primary":false,"text":[{"text":"    let vec = vec![1, 2, 3, 4];","highlight_start":9,"highlight_end":12}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-vec-pattern-element-loan.rs","byte_start":1230,"byte_end":1231,"line_start":42,"line_end":42,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-vec-pattern-element-loan.rs","byte_start":1230,"byte_end":1231,"line_start":42,"line_end":42,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-vec-pattern-element-loan.rs:42:1\n   |\n35 |     let vec = vec![1, 2, 3, 4];\n   |         --- temporary value created here\n...\n42 | }\n   | ^\n   | |\n   | temporary value dropped here while still borrowed\n   | temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 3 previous errors\n\n"}
