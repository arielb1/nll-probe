{"message":"cannot move out of `v` because it is borrowed","code":{"code":"E0505","explanation":"\nA value was moved out while it was still borrowed.\n\nErroneous code example:\n\n```compile_fail,E0505\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(x);\n    }\n}\n```\n\nHere, the function `eat` takes the ownership of `x`. However,\n`x` cannot be moved because it was borrowed to `_ref_to_val`.\nTo fix that you can do few different things:\n\n* Try to avoid moving the variable.\n* Release borrow before move.\n* Implement the `Copy` trait on the type.\n\nExamples:\n\n```\nstruct Value {}\n\nfn eat(val: &Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(&x); // pass by reference, if it's possible\n    }\n}\n```\n\nOr:\n\n```\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n    }\n    eat(x); // release borrow and then move it.\n}\n```\n\nOr:\n\n```\n#[derive(Clone, Copy)] // implement Copy trait\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(x); // it will be copied here.\n    }\n}\n```\n\nYou can find more information about borrowing in the rust-book:\nhttp://doc.rust-lang.org/stable/book/references-and-borrowing.html\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-loan-blocks-move-cc.rs","byte_start":634,"byte_end":636,"line_start":21,"line_end":21,"column_start":14,"column_end":16,"is_primary":false,"text":[{"text":"    let _w = &v;","highlight_start":14,"highlight_end":16}],"label":"borrow of `v` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-loan-blocks-move-cc.rs","byte_start":656,"byte_end":748,"line_start":22,"line_end":25,"column_start":19,"column_end":6,"is_primary":true,"text":[{"text":"    thread::spawn(move|| {","highlight_start":19,"highlight_end":27},{"text":"        println!(\"v={}\", *v);","highlight_start":1,"highlight_end":30},{"text":"        //~^ ERROR cannot move `v` into closure","highlight_start":1,"highlight_end":48},{"text":"    });","highlight_start":1,"highlight_end":6}],"label":"move out of `v` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0505]: cannot move out of `v` because it is borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-loan-blocks-move-cc.rs:22:19\n   |\n21 |       let _w = &v;\n   |                -- borrow of `v` occurs here\n22 |       thread::spawn(move|| {\n   |  ___________________^\n23 | |         println!(\"v={}\", *v);\n24 | |         //~^ ERROR cannot move `v` into closure\n25 | |     });\n   | |_____^ move out of `v` occurs here\n\n"}
{"message":"cannot move out of `v` because it is borrowed","code":{"code":"E0505","explanation":"\nA value was moved out while it was still borrowed.\n\nErroneous code example:\n\n```compile_fail,E0505\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(x);\n    }\n}\n```\n\nHere, the function `eat` takes the ownership of `x`. However,\n`x` cannot be moved because it was borrowed to `_ref_to_val`.\nTo fix that you can do few different things:\n\n* Try to avoid moving the variable.\n* Release borrow before move.\n* Implement the `Copy` trait on the type.\n\nExamples:\n\n```\nstruct Value {}\n\nfn eat(val: &Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(&x); // pass by reference, if it's possible\n    }\n}\n```\n\nOr:\n\n```\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n    }\n    eat(x); // release borrow and then move it.\n}\n```\n\nOr:\n\n```\n#[derive(Clone, Copy)] // implement Copy trait\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(x); // it will be copied here.\n    }\n}\n```\n\nYou can find more information about borrowing in the rust-book:\nhttp://doc.rust-lang.org/stable/book/references-and-borrowing.html\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-loan-blocks-move-cc.rs","byte_start":818,"byte_end":820,"line_start":30,"line_end":30,"column_start":14,"column_end":16,"is_primary":false,"text":[{"text":"    let _w = &v;","highlight_start":14,"highlight_end":16}],"label":"borrow of `v` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-loan-blocks-move-cc.rs","byte_start":840,"byte_end":915,"line_start":31,"line_end":34,"column_start":19,"column_end":6,"is_primary":true,"text":[{"text":"    thread::spawn(move|| {","highlight_start":19,"highlight_end":27},{"text":"        println!(\"v={}\", *v);","highlight_start":1,"highlight_end":30},{"text":"        //~^ ERROR cannot move","highlight_start":1,"highlight_end":31},{"text":"    });","highlight_start":1,"highlight_end":6}],"label":"move out of `v` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0505]: cannot move out of `v` because it is borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-loan-blocks-move-cc.rs:31:19\n   |\n30 |       let _w = &v;\n   |                -- borrow of `v` occurs here\n31 |       thread::spawn(move|| {\n   |  ___________________^\n32 | |         println!(\"v={}\", *v);\n33 | |         //~^ ERROR cannot move\n34 | |     });\n   | |_____^ move out of `v` occurs here\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 2 previous errors\n\n"}
