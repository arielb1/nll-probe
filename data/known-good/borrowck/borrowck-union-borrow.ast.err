{"message":"cannot borrow `u.a` as mutable because it is also borrowed as immutable","code":{"code":"E0502","explanation":"\nThis error indicates that you are trying to borrow a variable as mutable when it\nhas already been borrowed as immutable.\n\nExample of erroneous code:\n\n```compile_fail,E0502\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    let ref y = a; // a is borrowed as immutable.\n    bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed\n            //        as immutable\n}\n```\n\nTo fix this error, ensure that you don't have any other references to the\nvariable before trying to access it mutably:\n\n```\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    bar(a);\n    let ref y = a; // ok!\n}\n```\n\nFor more information on the rust ownership system, take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html.\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":922,"byte_end":930,"line_start":35,"line_end":35,"column_start":23,"column_end":31,"is_primary":true,"text":[{"text":"            let rma = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable","highlight_start":23,"highlight_end":31}],"label":"mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":894,"byte_end":898,"line_start":34,"line_end":34,"column_start":22,"column_end":26,"is_primary":false,"text":[{"text":"            let ra = &u.a;","highlight_start":22,"highlight_end":26}],"label":"immutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":1147,"byte_end":1148,"line_start":37,"line_end":37,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"immutable borrow ends here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0502]: cannot borrow `u.a` as mutable because it is also borrowed as immutable\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs:35:23\n   |\n34 |             let ra = &u.a;\n   |                      ---- immutable borrow occurs here\n35 |             let rma = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n   |                       ^^^^^^^^ mutable borrow occurs here\n36 |                                 //[mir]~^ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n37 |         }\n   |         - immutable borrow ends here\n\n"}
{"message":"cannot assign to `u.a` because it is borrowed","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":1180,"byte_end":1184,"line_start":39,"line_end":39,"column_start":22,"column_end":26,"is_primary":false,"text":[{"text":"            let ra = &u.a;","highlight_start":22,"highlight_end":26}],"label":"borrow of `u.a` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":1198,"byte_end":1205,"line_start":40,"line_end":40,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"            u.a = 1; //[ast]~ ERROR cannot assign to `u.a` because it is borrowed","highlight_start":13,"highlight_end":20}],"label":"assignment to borrowed `u.a` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0506]: cannot assign to `u.a` because it is borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs:40:13\n   |\n39 |             let ra = &u.a;\n   |                      ---- borrow of `u.a` occurs here\n40 |             u.a = 1; //[ast]~ ERROR cannot assign to `u.a` because it is borrowed\n   |             ^^^^^^^ assignment to borrowed `u.a` occurs here\n\n"}
{"message":"cannot borrow `u.b` as mutable because it is also borrowed as immutable","code":{"code":"E0502","explanation":"\nThis error indicates that you are trying to borrow a variable as mutable when it\nhas already been borrowed as immutable.\n\nExample of erroneous code:\n\n```compile_fail,E0502\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    let ref y = a; // a is borrowed as immutable.\n    bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed\n            //        as immutable\n}\n```\n\nTo fix this error, ensure that you don't have any other references to the\nvariable before trying to access it mutably:\n\n```\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    bar(a);\n    let ref y = a; // ok!\n}\n```\n\nFor more information on the rust ownership system, take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html.\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":1613,"byte_end":1621,"line_start":54,"line_end":54,"column_start":23,"column_end":31,"is_primary":true,"text":[{"text":"            let rmb = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)","highlight_start":23,"highlight_end":31}],"label":"mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":1585,"byte_end":1589,"line_start":53,"line_end":53,"column_start":22,"column_end":26,"is_primary":false,"text":[{"text":"            let ra = &u.a;","highlight_start":22,"highlight_end":26}],"label":"immutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":1861,"byte_end":1862,"line_start":56,"line_end":56,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"immutable borrow ends here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0502]: cannot borrow `u.b` as mutable because it is also borrowed as immutable\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs:54:23\n   |\n53 |             let ra = &u.a;\n   |                      ---- immutable borrow occurs here\n54 |             let rmb = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n   |                       ^^^^^^^^ mutable borrow occurs here\n55 |                                 //[mir]~^ ERROR cannot borrow `u.b` as mutable because it is also borrowed as immutable\n56 |         }\n   |         - immutable borrow ends here\n\n"}
{"message":"cannot assign to `u.b` because it is borrowed","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":1894,"byte_end":1898,"line_start":58,"line_end":58,"column_start":22,"column_end":26,"is_primary":false,"text":[{"text":"            let ra = &u.a;","highlight_start":22,"highlight_end":26}],"label":"borrow of `u.b` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":1912,"byte_end":1919,"line_start":59,"line_end":59,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"            u.b = 1; //[ast]~ ERROR cannot assign to `u.b` because it is borrowed","highlight_start":13,"highlight_end":20}],"label":"assignment to borrowed `u.b` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0506]: cannot assign to `u.b` because it is borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs:59:13\n   |\n58 |             let ra = &u.a;\n   |                      ---- borrow of `u.b` occurs here\n59 |             u.b = 1; //[ast]~ ERROR cannot assign to `u.b` because it is borrowed\n   |             ^^^^^^^ assignment to borrowed `u.b` occurs here\n\n"}
{"message":"cannot borrow `u.a` as immutable because it is also borrowed as mutable","code":{"code":"E0502","explanation":"\nThis error indicates that you are trying to borrow a variable as mutable when it\nhas already been borrowed as immutable.\n\nExample of erroneous code:\n\n```compile_fail,E0502\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    let ref y = a; // a is borrowed as immutable.\n    bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed\n            //        as immutable\n}\n```\n\nTo fix this error, ensure that you don't have any other references to the\nvariable before trying to access it mutably:\n\n```\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    bar(a);\n    let ref y = a; // ok!\n}\n```\n\nFor more information on the rust ownership system, take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html.\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":2172,"byte_end":2176,"line_start":65,"line_end":65,"column_start":22,"column_end":26,"is_primary":true,"text":[{"text":"            let ra = &u.a; //[ast]~ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable","highlight_start":22,"highlight_end":26}],"label":"immutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":2141,"byte_end":2149,"line_start":64,"line_end":64,"column_start":23,"column_end":31,"is_primary":false,"text":[{"text":"            let rma = &mut u.a;","highlight_start":23,"highlight_end":31}],"label":"mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":2386,"byte_end":2387,"line_start":67,"line_end":67,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"mutable borrow ends here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0502]: cannot borrow `u.a` as immutable because it is also borrowed as mutable\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs:65:22\n   |\n64 |             let rma = &mut u.a;\n   |                       -------- mutable borrow occurs here\n65 |             let ra = &u.a; //[ast]~ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n   |                      ^^^^ immutable borrow occurs here\n66 |                          //[mir]~^ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n67 |         }\n   |         - mutable borrow ends here\n\n"}
{"message":"cannot use `u.a` because it was mutably borrowed","code":{"code":"E0503","explanation":"\nA value was used after it was mutably borrowed.\n\nExample of erroneous code:\n\n```compile_fail,E0503\nfn main() {\n    let mut value = 3;\n    // Create a mutable borrow of `value`. This borrow\n    // lives until the end of this function.\n    let _borrow = &mut value;\n    let _sum = value + 1; // error: cannot use `value` because\n                          //        it was mutably borrowed\n}\n```\n\nIn this example, `value` is mutably borrowed by `borrow` and cannot be\nused to calculate `sum`. This is not possible because this would violate\nRust's mutability rules.\n\nYou can fix this error by limiting the scope of the borrow:\n\n```\nfn main() {\n    let mut value = 3;\n    // By creating a new block, you can limit the scope\n    // of the reference.\n    {\n        let _borrow = &mut value; // Use `_borrow` inside this block.\n    }\n    // The block has ended and with it the borrow.\n    // You can now use `value` again.\n    let _sum = value + 1;\n}\n```\n\nOr by cloning `value` before borrowing it:\n\n```\nfn main() {\n    let mut value = 3;\n    // We clone `value`, creating a copy.\n    let value_cloned = value.clone();\n    // The mutable borrow is a reference to `value` and\n    // not to `value_cloned`...\n    let _borrow = &mut value;\n    // ... which means we can still use `value_cloned`,\n    let _sum = value_cloned + 1;\n    // even though the borrow only ends here.\n}\n```\n\nYou can find more information about borrowing in the rust-book:\nhttp://doc.rust-lang.org/stable/book/references-and-borrowing.html\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":2419,"byte_end":2427,"line_start":69,"line_end":69,"column_start":22,"column_end":30,"is_primary":false,"text":[{"text":"            let ra = &mut u.a;","highlight_start":22,"highlight_end":30}],"label":"borrow of `u.a` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":2449,"byte_end":2452,"line_start":70,"line_end":70,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"            let a = u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed","highlight_start":21,"highlight_end":24}],"label":"use of borrowed `u.a`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0503]: cannot use `u.a` because it was mutably borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs:70:21\n   |\n69 |             let ra = &mut u.a;\n   |                      -------- borrow of `u.a` occurs here\n70 |             let a = u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n   |                     ^^^ use of borrowed `u.a`\n\n"}
{"message":"cannot borrow `u.a` as mutable more than once at a time","code":{"code":"E0499","explanation":"\nA variable was borrowed as mutable more than once. Erroneous code example:\n\n```compile_fail,E0499\nlet mut i = 0;\nlet mut x = &mut i;\nlet mut a = &mut i;\n// error: cannot borrow `i` as mutable more than once at a time\n```\n\nPlease note that in rust, you can either have many immutable references, or one\nmutable reference. Take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html for more\ninformation. Example:\n\n\n```\nlet mut i = 0;\nlet mut x = &mut i; // ok!\n\n// or:\nlet mut i = 0;\nlet a = &i; // ok!\nlet b = &i; // still ok!\nlet c = &i; // still ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":2650,"byte_end":2658,"line_start":74,"line_end":74,"column_start":23,"column_end":31,"is_primary":false,"text":[{"text":"            let rma = &mut u.a;","highlight_start":23,"highlight_end":31}],"label":"first mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":2683,"byte_end":2691,"line_start":75,"line_end":75,"column_start":24,"column_end":32,"is_primary":true,"text":[{"text":"            let rma2 = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as mutable more than once at a time","highlight_start":24,"highlight_end":32}],"label":"second mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":2877,"byte_end":2878,"line_start":77,"line_end":77,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"first borrow ends here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0499]: cannot borrow `u.a` as mutable more than once at a time\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs:75:24\n   |\n74 |             let rma = &mut u.a;\n   |                       -------- first mutable borrow occurs here\n75 |             let rma2 = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as mutable more than once at a time\n   |                        ^^^^^^^^ second mutable borrow occurs here\n76 |                                  //[mir]~^ ERROR cannot borrow `u.a` as mutable more than once at a time\n77 |         }\n   |         - first borrow ends here\n\n"}
{"message":"cannot assign to `u.a` because it is borrowed","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":2911,"byte_end":2919,"line_start":79,"line_end":79,"column_start":23,"column_end":31,"is_primary":false,"text":[{"text":"            let rma = &mut u.a;","highlight_start":23,"highlight_end":31}],"label":"borrow of `u.a` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":2933,"byte_end":2940,"line_start":80,"line_end":80,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"            u.a = 1; //[ast]~ ERROR cannot assign to `u.a` because it is borrowed","highlight_start":13,"highlight_end":20}],"label":"assignment to borrowed `u.a` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0506]: cannot assign to `u.a` because it is borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs:80:13\n   |\n79 |             let rma = &mut u.a;\n   |                       -------- borrow of `u.a` occurs here\n80 |             u.a = 1; //[ast]~ ERROR cannot assign to `u.a` because it is borrowed\n   |             ^^^^^^^ assignment to borrowed `u.a` occurs here\n\n"}
{"message":"cannot borrow `u.b` as immutable because it is also borrowed as mutable","code":{"code":"E0502","explanation":"\nThis error indicates that you are trying to borrow a variable as mutable when it\nhas already been borrowed as immutable.\n\nExample of erroneous code:\n\n```compile_fail,E0502\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    let ref y = a; // a is borrowed as immutable.\n    bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed\n            //        as immutable\n}\n```\n\nTo fix this error, ensure that you don't have any other references to the\nvariable before trying to access it mutably:\n\n```\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    bar(a);\n    let ref y = a; // ok!\n}\n```\n\nFor more information on the rust ownership system, take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html.\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":3194,"byte_end":3198,"line_start":86,"line_end":86,"column_start":22,"column_end":26,"is_primary":true,"text":[{"text":"            let rb = &u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)","highlight_start":22,"highlight_end":26}],"label":"immutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":3163,"byte_end":3171,"line_start":85,"line_end":85,"column_start":23,"column_end":31,"is_primary":false,"text":[{"text":"            let rma = &mut u.a;","highlight_start":23,"highlight_end":31}],"label":"mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":3433,"byte_end":3434,"line_start":88,"line_end":88,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"mutable borrow ends here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0502]: cannot borrow `u.b` as immutable because it is also borrowed as mutable\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs:86:22\n   |\n85 |             let rma = &mut u.a;\n   |                       -------- mutable borrow occurs here\n86 |             let rb = &u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n   |                      ^^^^ immutable borrow occurs here\n87 |                            //[mir]~^ ERROR cannot borrow `u.b` as immutable because it is also borrowed as mutable\n88 |         }\n   |         - mutable borrow ends here\n\n"}
{"message":"cannot use `u.b` because it was mutably borrowed","code":{"code":"E0503","explanation":"\nA value was used after it was mutably borrowed.\n\nExample of erroneous code:\n\n```compile_fail,E0503\nfn main() {\n    let mut value = 3;\n    // Create a mutable borrow of `value`. This borrow\n    // lives until the end of this function.\n    let _borrow = &mut value;\n    let _sum = value + 1; // error: cannot use `value` because\n                          //        it was mutably borrowed\n}\n```\n\nIn this example, `value` is mutably borrowed by `borrow` and cannot be\nused to calculate `sum`. This is not possible because this would violate\nRust's mutability rules.\n\nYou can fix this error by limiting the scope of the borrow:\n\n```\nfn main() {\n    let mut value = 3;\n    // By creating a new block, you can limit the scope\n    // of the reference.\n    {\n        let _borrow = &mut value; // Use `_borrow` inside this block.\n    }\n    // The block has ended and with it the borrow.\n    // You can now use `value` again.\n    let _sum = value + 1;\n}\n```\n\nOr by cloning `value` before borrowing it:\n\n```\nfn main() {\n    let mut value = 3;\n    // We clone `value`, creating a copy.\n    let value_cloned = value.clone();\n    // The mutable borrow is a reference to `value` and\n    // not to `value_cloned`...\n    let _borrow = &mut value;\n    // ... which means we can still use `value_cloned`,\n    let _sum = value_cloned + 1;\n    // even though the borrow only ends here.\n}\n```\n\nYou can find more information about borrowing in the rust-book:\nhttp://doc.rust-lang.org/stable/book/references-and-borrowing.html\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":3466,"byte_end":3474,"line_start":90,"line_end":90,"column_start":22,"column_end":30,"is_primary":false,"text":[{"text":"            let ra = &mut u.a;","highlight_start":22,"highlight_end":30}],"label":"borrow of `u.a` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":3496,"byte_end":3499,"line_start":91,"line_end":91,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"            let b = u.b; //[ast]~ ERROR cannot use `u.b` because it was mutably borrowed","highlight_start":21,"highlight_end":24}],"label":"use of borrowed `u.a`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0503]: cannot use `u.b` because it was mutably borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs:91:21\n   |\n90 |             let ra = &mut u.a;\n   |                      -------- borrow of `u.a` occurs here\n91 |             let b = u.b; //[ast]~ ERROR cannot use `u.b` because it was mutably borrowed\n   |                     ^^^ use of borrowed `u.a`\n\n"}
{"message":"cannot borrow `u.b` as mutable more than once at a time","code":{"code":"E0499","explanation":"\nA variable was borrowed as mutable more than once. Erroneous code example:\n\n```compile_fail,E0499\nlet mut i = 0;\nlet mut x = &mut i;\nlet mut a = &mut i;\n// error: cannot borrow `i` as mutable more than once at a time\n```\n\nPlease note that in rust, you can either have many immutable references, or one\nmutable reference. Take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html for more\ninformation. Example:\n\n\n```\nlet mut i = 0;\nlet mut x = &mut i; // ok!\n\n// or:\nlet mut i = 0;\nlet a = &i; // ok!\nlet b = &i; // still ok!\nlet c = &i; // still ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":3698,"byte_end":3706,"line_start":96,"line_end":96,"column_start":23,"column_end":31,"is_primary":false,"text":[{"text":"            let rma = &mut u.a;","highlight_start":23,"highlight_end":31}],"label":"first mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":3731,"byte_end":3739,"line_start":97,"line_end":97,"column_start":24,"column_end":32,"is_primary":true,"text":[{"text":"            let rmb2 = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time","highlight_start":24,"highlight_end":32}],"label":"second mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":3935,"byte_end":3936,"line_start":99,"line_end":99,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"first borrow ends here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0499]: cannot borrow `u.b` as mutable more than once at a time\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs:97:24\n   |\n96 |             let rma = &mut u.a;\n   |                       -------- first mutable borrow occurs here\n97 |             let rmb2 = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time\n   |                        ^^^^^^^^ second mutable borrow occurs here\n98 |                                  //[mir]~^ ERROR cannot borrow `u.b` as mutable more than once at a time\n99 |         }\n   |         - first borrow ends here\n\n"}
{"message":"cannot assign to `u.b` because it is borrowed","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":3969,"byte_end":3977,"line_start":101,"line_end":101,"column_start":23,"column_end":31,"is_primary":false,"text":[{"text":"            let rma = &mut u.a;","highlight_start":23,"highlight_end":31}],"label":"borrow of `u.b` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs","byte_start":3991,"byte_end":3998,"line_start":102,"line_end":102,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"            u.b = 1; //[ast]~ ERROR cannot assign to `u.b` because it is borrowed","highlight_start":13,"highlight_end":20}],"label":"assignment to borrowed `u.b` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0506]: cannot assign to `u.b` because it is borrowed\n   --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow.rs:102:13\n    |\n101 |             let rma = &mut u.a;\n    |                       -------- borrow of `u.b` occurs here\n102 |             u.b = 1; //[ast]~ ERROR cannot assign to `u.b` because it is borrowed\n    |             ^^^^^^^ assignment to borrowed `u.b` occurs here\n\n"}
{"message":"aborting due to 12 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 12 previous errors\n\n"}
