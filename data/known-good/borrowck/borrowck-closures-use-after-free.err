{"message":"cannot borrow `*ptr` as immutable because it is also borrowed as mutable","code":{"code":"E0502","explanation":"\nThis error indicates that you are trying to borrow a variable as mutable when it\nhas already been borrowed as immutable.\n\nExample of erroneous code:\n\n```compile_fail,E0502\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    let ref y = a; // a is borrowed as immutable.\n    bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed\n            //        as immutable\n}\n```\n\nTo fix this error, ensure that you don't have any other references to the\nvariable before trying to access it mutably:\n\n```\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    bar(a);\n    let ref y = a; // ok!\n}\n```\n\nFor more information on the rust ownership system, take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html.\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-use-after-free.rs","byte_start":883,"byte_end":888,"line_start":32,"line_end":32,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"  test(&*ptr); //~ ERROR cannot borrow `*ptr`","highlight_start":8,"highlight_end":13}],"label":"immutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-use-after-free.rs","byte_start":821,"byte_end":832,"line_start":29,"line_end":29,"column_start":18,"column_end":29,"is_primary":false,"text":[{"text":"  let mut test = |foo: &Foo| {","highlight_start":18,"highlight_end":29}],"label":"mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-use-after-free.rs","byte_start":922,"byte_end":923,"line_start":33,"line_end":33,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"mutable borrow ends here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-use-after-free.rs","byte_start":839,"byte_end":842,"line_start":30,"line_end":30,"column_start":5,"column_end":8,"is_primary":false,"text":[{"text":"    ptr = box Foo { x: ptr.x + 1 };","highlight_start":5,"highlight_end":8}],"label":"previous borrow occurs due to use of `*ptr` in closure","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0502]: cannot borrow `*ptr` as immutable because it is also borrowed as mutable\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-use-after-free.rs:32:8\n   |\n29 |   let mut test = |foo: &Foo| {\n   |                  ----------- mutable borrow occurs here\n30 |     ptr = box Foo { x: ptr.x + 1 };\n   |     --- previous borrow occurs due to use of `*ptr` in closure\n31 |   };\n32 |   test(&*ptr); //~ ERROR cannot borrow `*ptr`\n   |        ^^^^^ immutable borrow occurs here\n33 | }\n   | - mutable borrow ends here\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to previous error\n\n"}
