{"message":"cannot borrow `x` as immutable because it is also borrowed as mutable","code":{"code":"E0502","explanation":"\nThis error indicates that you are trying to borrow a variable as mutable when it\nhas already been borrowed as immutable.\n\nExample of erroneous code:\n\n```compile_fail,E0502\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    let ref y = a; // a is borrowed as immutable.\n    bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed\n            //        as immutable\n}\n```\n\nTo fix this error, ensure that you don't have any other references to the\nvariable before trying to access it mutably:\n\n```\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    bar(a);\n    let ref y = a; // ok!\n}\n```\n\nFor more information on the rust ownership system, take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html.\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":838,"byte_end":840,"line_start":31,"line_end":31,"column_start":14,"column_end":16,"is_primary":true,"text":[{"text":"    let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`","highlight_start":14,"highlight_end":16}],"label":"immutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":815,"byte_end":817,"line_start":30,"line_end":30,"column_start":14,"column_end":16,"is_primary":false,"text":[{"text":"    let c1 = || x = 4;","highlight_start":14,"highlight_end":16}],"label":"mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":990,"byte_end":991,"line_start":33,"line_end":33,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"mutable borrow ends here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":818,"byte_end":819,"line_start":30,"line_end":30,"column_start":17,"column_end":18,"is_primary":false,"text":[{"text":"    let c1 = || x = 4;","highlight_start":17,"highlight_end":18}],"label":"previous borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":841,"byte_end":842,"line_start":31,"line_end":31,"column_start":17,"column_end":18,"is_primary":false,"text":[{"text":"    let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`","highlight_start":17,"highlight_end":18}],"label":"borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs:31:14\n   |\n30 |     let c1 = || x = 4;\n   |              -- - previous borrow occurs due to use of `x` in closure\n   |              |\n   |              mutable borrow occurs here\n31 |     let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`\n   |              ^^ - borrow occurs due to use of `x` in closure\n   |              |\n   |              immutable borrow occurs here\n32 |                        //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n33 | }\n   | - mutable borrow ends here\n\n"}
{"message":"cannot borrow `x` as immutable because it is also borrowed as mutable","code":{"code":"E0502","explanation":"\nThis error indicates that you are trying to borrow a variable as mutable when it\nhas already been borrowed as immutable.\n\nExample of erroneous code:\n\n```compile_fail,E0502\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    let ref y = a; // a is borrowed as immutable.\n    bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed\n            //        as immutable\n}\n```\n\nTo fix this error, ensure that you don't have any other references to the\nvariable before trying to access it mutably:\n\n```\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    bar(a);\n    let ref y = a; // ok!\n}\n```\n\nFor more information on the rust ownership system, take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html.\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":1063,"byte_end":1065,"line_start":38,"line_end":38,"column_start":14,"column_end":16,"is_primary":true,"text":[{"text":"    let c2 = || get(&x); //[ast]~ ERROR cannot borrow `x`","highlight_start":14,"highlight_end":16}],"label":"immutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":1034,"byte_end":1036,"line_start":37,"line_end":37,"column_start":14,"column_end":16,"is_primary":false,"text":[{"text":"    let c1 = || set(&mut x);","highlight_start":14,"highlight_end":16}],"label":"mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":1219,"byte_end":1220,"line_start":40,"line_end":40,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"mutable borrow ends here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":1046,"byte_end":1047,"line_start":37,"line_end":37,"column_start":26,"column_end":27,"is_primary":false,"text":[{"text":"    let c1 = || set(&mut x);","highlight_start":26,"highlight_end":27}],"label":"previous borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":1071,"byte_end":1072,"line_start":38,"line_end":38,"column_start":22,"column_end":23,"is_primary":false,"text":[{"text":"    let c2 = || get(&x); //[ast]~ ERROR cannot borrow `x`","highlight_start":22,"highlight_end":23}],"label":"borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs:38:14\n   |\n37 |     let c1 = || set(&mut x);\n   |              --          - previous borrow occurs due to use of `x` in closure\n   |              |\n   |              mutable borrow occurs here\n38 |     let c2 = || get(&x); //[ast]~ ERROR cannot borrow `x`\n   |              ^^      - borrow occurs due to use of `x` in closure\n   |              |\n   |              immutable borrow occurs here\n39 |                          //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n40 | }\n   | - mutable borrow ends here\n\n"}
{"message":"cannot borrow `x` as immutable because it is also borrowed as mutable","code":{"code":"E0502","explanation":"\nThis error indicates that you are trying to borrow a variable as mutable when it\nhas already been borrowed as immutable.\n\nExample of erroneous code:\n\n```compile_fail,E0502\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    let ref y = a; // a is borrowed as immutable.\n    bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed\n            //        as immutable\n}\n```\n\nTo fix this error, ensure that you don't have any other references to the\nvariable before trying to access it mutably:\n\n```\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    bar(a);\n    let ref y = a; // ok!\n}\n```\n\nFor more information on the rust ownership system, take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html.\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":1292,"byte_end":1294,"line_start":45,"line_end":45,"column_start":14,"column_end":16,"is_primary":true,"text":[{"text":"    let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`","highlight_start":14,"highlight_end":16}],"label":"immutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":1263,"byte_end":1265,"line_start":44,"line_end":44,"column_start":14,"column_end":16,"is_primary":false,"text":[{"text":"    let c1 = || set(&mut x);","highlight_start":14,"highlight_end":16}],"label":"mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":1444,"byte_end":1445,"line_start":47,"line_end":47,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"mutable borrow ends here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":1275,"byte_end":1276,"line_start":44,"line_end":44,"column_start":26,"column_end":27,"is_primary":false,"text":[{"text":"    let c1 = || set(&mut x);","highlight_start":26,"highlight_end":27}],"label":"previous borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":1295,"byte_end":1296,"line_start":45,"line_end":45,"column_start":17,"column_end":18,"is_primary":false,"text":[{"text":"    let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`","highlight_start":17,"highlight_end":18}],"label":"borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs:45:14\n   |\n44 |     let c1 = || set(&mut x);\n   |              --          - previous borrow occurs due to use of `x` in closure\n   |              |\n   |              mutable borrow occurs here\n45 |     let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`\n   |              ^^ - borrow occurs due to use of `x` in closure\n   |              |\n   |              immutable borrow occurs here\n46 |                        //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n47 | }\n   | - mutable borrow ends here\n\n"}
{"message":"cannot assign to `x` because it is borrowed","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":1488,"byte_end":1496,"line_start":51,"line_end":51,"column_start":14,"column_end":22,"is_primary":false,"text":[{"text":"    let c2 = || x * 5;","highlight_start":14,"highlight_end":22}],"label":"borrow of `x` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":1502,"byte_end":1507,"line_start":52,"line_end":52,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    x = 5; //[ast]~ ERROR cannot assign","highlight_start":5,"highlight_end":10}],"label":"assignment to borrowed `x` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0506]: cannot assign to `x` because it is borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs:52:5\n   |\n51 |     let c2 = || x * 5;\n   |              -------- borrow of `x` occurs here\n52 |     x = 5; //[ast]~ ERROR cannot assign\n   |     ^^^^^ assignment to borrowed `x` occurs here\n\n"}
{"message":"cannot assign to `x` because it is borrowed","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":1653,"byte_end":1663,"line_start":58,"line_end":58,"column_start":14,"column_end":24,"is_primary":false,"text":[{"text":"    let c1 = || get(&x);","highlight_start":14,"highlight_end":24}],"label":"borrow of `x` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":1669,"byte_end":1674,"line_start":59,"line_end":59,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    x = 5; //[ast]~ ERROR cannot assign","highlight_start":5,"highlight_end":10}],"label":"assignment to borrowed `x` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0506]: cannot assign to `x` because it is borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs:59:5\n   |\n58 |     let c1 = || get(&x);\n   |              ---------- borrow of `x` occurs here\n59 |     x = 5; //[ast]~ ERROR cannot assign\n   |     ^^^^^ assignment to borrowed `x` occurs here\n\n"}
{"message":"cannot assign to `*x` because it is borrowed","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":1832,"byte_end":1843,"line_start":65,"line_end":65,"column_start":14,"column_end":25,"is_primary":false,"text":[{"text":"    let c1 = || get(&*x);","highlight_start":14,"highlight_end":25}],"label":"borrow of `*x` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":1849,"byte_end":1855,"line_start":66,"line_end":66,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    *x = 5; //[ast]~ ERROR cannot assign to `*x`","highlight_start":5,"highlight_end":11}],"label":"assignment to borrowed `*x` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0506]: cannot assign to `*x` because it is borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs:66:5\n   |\n65 |     let c1 = || get(&*x);\n   |              ----------- borrow of `*x` occurs here\n66 |     *x = 5; //[ast]~ ERROR cannot assign to `*x`\n   |     ^^^^^^ assignment to borrowed `*x` occurs here\n\n"}
{"message":"cannot assign to `*x.f` because it is borrowed","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":2084,"byte_end":2097,"line_start":76,"line_end":76,"column_start":14,"column_end":27,"is_primary":false,"text":[{"text":"    let c1 = || get(&*x.f);","highlight_start":14,"highlight_end":27}],"label":"borrow of `*x.f` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":2103,"byte_end":2111,"line_start":77,"line_end":77,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    *x.f = 5; //[ast]~ ERROR cannot assign to `*x.f`","highlight_start":5,"highlight_end":13}],"label":"assignment to borrowed `*x.f` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0506]: cannot assign to `*x.f` because it is borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs:77:5\n   |\n76 |     let c1 = || get(&*x.f);\n   |              ------------- borrow of `*x.f` occurs here\n77 |     *x.f = 5; //[ast]~ ERROR cannot assign to `*x.f`\n   |     ^^^^^^^^ assignment to borrowed `*x.f` occurs here\n\n"}
{"message":"cannot borrow `x` as mutable because it is also borrowed as immutable","code":{"code":"E0502","explanation":"\nThis error indicates that you are trying to borrow a variable as mutable when it\nhas already been borrowed as immutable.\n\nExample of erroneous code:\n\n```compile_fail,E0502\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    let ref y = a; // a is borrowed as immutable.\n    bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed\n            //        as immutable\n}\n```\n\nTo fix this error, ensure that you don't have any other references to the\nvariable before trying to access it mutably:\n\n```\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    bar(a);\n    let ref y = a; // ok!\n}\n```\n\nFor more information on the rust ownership system, take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html.\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":2374,"byte_end":2376,"line_start":88,"line_end":88,"column_start":14,"column_end":16,"is_primary":true,"text":[{"text":"    let c2 = || *x.f = 5; //[ast]~ ERROR cannot borrow `x` as mutable","highlight_start":14,"highlight_end":16}],"label":"mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":2346,"byte_end":2348,"line_start":87,"line_end":87,"column_start":14,"column_end":16,"is_primary":false,"text":[{"text":"    let c1 = || get(&*x.f);","highlight_start":14,"highlight_end":16}],"label":"immutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":2543,"byte_end":2544,"line_start":90,"line_end":90,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"immutable borrow ends here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":2355,"byte_end":2356,"line_start":87,"line_end":87,"column_start":23,"column_end":24,"is_primary":false,"text":[{"text":"    let c1 = || get(&*x.f);","highlight_start":23,"highlight_end":24}],"label":"previous borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs","byte_start":2378,"byte_end":2379,"line_start":88,"line_end":88,"column_start":18,"column_end":19,"is_primary":false,"text":[{"text":"    let c2 = || *x.f = 5; //[ast]~ ERROR cannot borrow `x` as mutable","highlight_start":18,"highlight_end":19}],"label":"borrow occurs due to use of `x` in closure","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs:88:14\n   |\n87 |     let c1 = || get(&*x.f);\n   |              --       - previous borrow occurs due to use of `x` in closure\n   |              |\n   |              immutable borrow occurs here\n88 |     let c2 = || *x.f = 5; //[ast]~ ERROR cannot borrow `x` as mutable\n   |              ^^  - borrow occurs due to use of `x` in closure\n   |              |\n   |              mutable borrow occurs here\n89 |                           //[mir]~^ ERROR cannot borrow `x` as mutable because it is also borrowed as immutable\n90 | }\n   | - immutable borrow ends here\n\n"}
{"message":"aborting due to 8 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 8 previous errors\n\n"}
