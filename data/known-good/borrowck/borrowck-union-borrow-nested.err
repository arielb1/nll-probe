{"message":"cannot use `u.c` because it was mutably borrowed","code":{"code":"E0503","explanation":"\nA value was used after it was mutably borrowed.\n\nExample of erroneous code:\n\n```compile_fail,E0503\nfn main() {\n    let mut value = 3;\n    // Create a mutable borrow of `value`. This borrow\n    // lives until the end of this function.\n    let _borrow = &mut value;\n    let _sum = value + 1; // error: cannot use `value` because\n                          //        it was mutably borrowed\n}\n```\n\nIn this example, `value` is mutably borrowed by `borrow` and cannot be\nused to calculate `sum`. This is not possible because this would violate\nRust's mutability rules.\n\nYou can fix this error by limiting the scope of the borrow:\n\n```\nfn main() {\n    let mut value = 3;\n    // By creating a new block, you can limit the scope\n    // of the reference.\n    {\n        let _borrow = &mut value; // Use `_borrow` inside this block.\n    }\n    // The block has ended and with it the borrow.\n    // You can now use `value` again.\n    let _sum = value + 1;\n}\n```\n\nOr by cloning `value` before borrowing it:\n\n```\nfn main() {\n    let mut value = 3;\n    // We clone `value`, creating a copy.\n    let value_cloned = value.clone();\n    // The mutable borrow is a reference to `value` and\n    // not to `value_cloned`...\n    let _borrow = &mut value;\n    // ... which means we can still use `value_cloned`,\n    let _sum = value_cloned + 1;\n    // even though the borrow only ends here.\n}\n```\n\nYou can find more information about borrowing in the rust-book:\nhttp://doc.rust-lang.org/stable/book/references-and-borrowing.html\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow-nested.rs","byte_start":829,"byte_end":839,"line_start":32,"line_end":32,"column_start":22,"column_end":32,"is_primary":false,"text":[{"text":"            let ra = &mut u.s.a;","highlight_start":22,"highlight_end":32}],"label":"borrow of `u.s.a` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow-nested.rs","byte_start":861,"byte_end":864,"line_start":33,"line_end":33,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"            let b = u.c; //~ ERROR cannot use `u.c` because it was mutably borrowed","highlight_start":21,"highlight_end":24}],"label":"use of borrowed `u.s.a`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0503]: cannot use `u.c` because it was mutably borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrowck/borrowck-union-borrow-nested.rs:33:21\n   |\n32 |             let ra = &mut u.s.a;\n   |                      ---------- borrow of `u.s.a` occurs here\n33 |             let b = u.c; //~ ERROR cannot use `u.c` because it was mutably borrowed\n   |                     ^^^ use of borrowed `u.s.a`\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to previous error\n\n"}
