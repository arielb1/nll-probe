{"message":"cannot move out of type `[A]`, a non-copy slice","code":{"code":"E0508","explanation":"\nA value was moved out of a non-copy fixed-size array.\n\nExample of erroneous code:\n\n```compile_fail,E0508\nstruct NonCopy;\n\nfn main() {\n    let array = [NonCopy; 1];\n    let _value = array[0]; // error: cannot move out of type `[NonCopy; 1]`,\n                           //        a non-copy fixed-size array\n}\n```\n\nThe first element was moved out of the array, but this is not\npossible because `NonCopy` does not implement the `Copy` trait.\n\nConsider borrowing the element instead of moving it:\n\n```\nstruct NonCopy;\n\nfn main() {\n    let array = [NonCopy; 1];\n    let _value = &array[0]; // Borrowing is allowed, unlike moving.\n}\n```\n\nAlternatively, if your type implements `Clone` and you need to own the value,\nconsider borrowing and then cloning:\n\n```\n#[derive(Clone)]\nstruct NonCopy;\n\nfn main() {\n    let array = [NonCopy; 1];\n    // Now you can clone the array element.\n    let _value = array[0].clone();\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/move-out-of-slice-1.rs","byte_start":597,"byte_end":598,"line_start":18,"line_end":18,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"        box [a] => {}, //~ ERROR cannot move out of type `[A]`, a non-copy slice","highlight_start":14,"highlight_end":15}],"label":"cannot move out of here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0508]: cannot move out of type `[A]`, a non-copy slice\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/move-out-of-slice-1.rs:18:14\n   |\n18 |         box [a] => {}, //~ ERROR cannot move out of type `[A]`, a non-copy slice\n   |              ^ cannot move out of here\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to previous error\n\n"}
