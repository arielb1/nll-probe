{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/regions-ref-in-fn-arg.rs","byte_start":530,"byte_end":539,"line_start":14,"line_end":14,"column_start":13,"column_end":22,"is_primary":false,"text":[{"text":"fn arg_item(box ref x: Box<isize>) -> &'static isize {","highlight_start":13,"highlight_end":22}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/regions-ref-in-fn-arg.rs","byte_start":632,"byte_end":632,"line_start":16,"line_end":16,"column_start":2,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":2,"highlight_end":2}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/regions-ref-in-fn-arg.rs","byte_start":631,"byte_end":632,"line_start":16,"line_end":16,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/regions-ref-in-fn-arg.rs:16:2\n   |\n14 | fn arg_item(box ref x: Box<isize>) -> &'static isize {\n   |             --------- temporary value created here\n15 |     x //~^ ERROR borrowed value does not live long enough\n16 | }\n   | -^ temporary value dropped here while still borrowed\n   | |\n   | temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/regions-ref-in-fn-arg.rs","byte_start":753,"byte_end":762,"line_start":21,"line_end":21,"column_start":11,"column_end":20,"is_primary":false,"text":[{"text":"    with(|box ref x| x) //~ ERROR borrowed value does not live long enough","highlight_start":11,"highlight_end":20}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/regions-ref-in-fn-arg.rs","byte_start":765,"byte_end":765,"line_start":21,"line_end":21,"column_start":23,"column_end":23,"is_primary":true,"text":[{"text":"    with(|box ref x| x) //~ ERROR borrowed value does not live long enough","highlight_start":23,"highlight_end":23}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/regions-ref-in-fn-arg.rs","byte_start":764,"byte_end":765,"line_start":21,"line_end":21,"column_start":22,"column_end":23,"is_primary":false,"text":[{"text":"    with(|box ref x| x) //~ ERROR borrowed value does not live long enough","highlight_start":22,"highlight_end":23}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/regions-ref-in-fn-arg.rs:21:23\n   |\n21 |     with(|box ref x| x) //~ ERROR borrowed value does not live long enough\n   |           ---------  -^ temporary value dropped here while still borrowed\n   |           |          |\n   |           |          temporary value needs to live until here\n   |           temporary value created here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 2 previous errors\n\n"}
