{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/static-reference-to-fn-2.rs","byte_start":909,"byte_end":939,"line_start":28,"line_end":28,"column_start":22,"column_end":52,"is_primary":false,"text":[{"text":"    self_.statefn = &id(state2 as StateMachineFunc);","highlight_start":22,"highlight_end":52}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/static-reference-to-fn-2.rs","byte_start":940,"byte_end":940,"line_start":28,"line_end":28,"column_start":53,"column_end":53,"is_primary":true,"text":[{"text":"    self_.statefn = &id(state2 as StateMachineFunc);","highlight_start":53,"highlight_end":53}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/static-reference-to-fn-2.rs","byte_start":1024,"byte_end":1025,"line_start":31,"line_end":31,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/static-reference-to-fn-2.rs:28:53\n   |\n28 |     self_.statefn = &id(state2 as StateMachineFunc);\n   |                      ------------------------------ ^ temporary value dropped here while still borrowed\n   |                      |\n   |                      temporary value created here\n...\n31 | }\n   | - temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/static-reference-to-fn-2.rs","byte_start":1116,"byte_end":1146,"line_start":34,"line_end":34,"column_start":22,"column_end":52,"is_primary":false,"text":[{"text":"    self_.statefn = &id(state3 as StateMachineFunc);","highlight_start":22,"highlight_end":52}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/static-reference-to-fn-2.rs","byte_start":1147,"byte_end":1147,"line_start":34,"line_end":34,"column_start":53,"column_end":53,"is_primary":true,"text":[{"text":"    self_.statefn = &id(state3 as StateMachineFunc);","highlight_start":53,"highlight_end":53}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/static-reference-to-fn-2.rs","byte_start":1231,"byte_end":1232,"line_start":37,"line_end":37,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/static-reference-to-fn-2.rs:34:53\n   |\n34 |     self_.statefn = &id(state3 as StateMachineFunc);\n   |                      ------------------------------ ^ temporary value dropped here while still borrowed\n   |                      |\n   |                      temporary value created here\n...\n37 | }\n   | - temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/static-reference-to-fn-2.rs","byte_start":1323,"byte_end":1355,"line_start":40,"line_end":40,"column_start":22,"column_end":54,"is_primary":false,"text":[{"text":"    self_.statefn = &id(finished as StateMachineFunc);","highlight_start":22,"highlight_end":54}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/static-reference-to-fn-2.rs","byte_start":1356,"byte_end":1356,"line_start":40,"line_end":40,"column_start":55,"column_end":55,"is_primary":true,"text":[{"text":"    self_.statefn = &id(finished as StateMachineFunc);","highlight_start":55,"highlight_end":55}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/static-reference-to-fn-2.rs","byte_start":1440,"byte_end":1441,"line_start":43,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/static-reference-to-fn-2.rs:40:55\n   |\n40 |     self_.statefn = &id(finished as StateMachineFunc);\n   |                      -------------------------------- ^ temporary value dropped here while still borrowed\n   |                      |\n   |                      temporary value created here\n...\n43 | }\n   | - temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/static-reference-to-fn-2.rs","byte_start":1617,"byte_end":1647,"line_start":51,"line_end":51,"column_start":19,"column_end":49,"is_primary":false,"text":[{"text":"        statefn: &id(state1 as StateMachineFunc)","highlight_start":19,"highlight_end":49}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/static-reference-to-fn-2.rs","byte_start":1715,"byte_end":1715,"line_start":54,"line_end":54,"column_start":2,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":2,"highlight_end":2}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/static-reference-to-fn-2.rs","byte_start":1714,"byte_end":1715,"line_start":54,"line_end":54,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/static-reference-to-fn-2.rs:54:2\n   |\n51 |         statefn: &id(state1 as StateMachineFunc)\n   |                   ------------------------------ temporary value created here\n...\n54 | }\n   | -^ temporary value dropped here while still borrowed\n   | |\n   | temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 4 previous errors\n\n"}
