{"message":"blocks in constants are limited to items and tail expressions","code":{"code":"E0016","explanation":"\nBlocks in constants may only contain items (such as constant, function\ndefinition, etc...) and a tail expression. Erroneous code example:\n\n```compile_fail,E0016\nconst FOO: i32 = { let x = 0; x }; // 'x' isn't an item!\n```\n\nTo avoid it, you have to replace the non-item object:\n\n```\nconst FOO: i32 = { const X : i32 = 0; X };\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-18118.rs","byte_start":612,"byte_end":613,"line_start":14,"line_end":14,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"        let p = 3;","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0016]: blocks in constants are limited to items and tail expressions\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/issue-18118.rs:14:17\n   |\n14 |         let p = 3;\n   |                 ^\n\n"}
{"message":"blocks in constants are limited to items and tail expressions","code":{"code":"E0016","explanation":"\nBlocks in constants may only contain items (such as constant, function\ndefinition, etc...) and a tail expression. Erroneous code example:\n\n```compile_fail,E0016\nconst FOO: i32 = { let x = 0; x }; // 'x' isn't an item!\n```\n\nTo avoid it, you have to replace the non-item object:\n\n```\nconst FOO: i32 = { const X : i32 = 0; X };\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-18118.rs","byte_start":487,"byte_end":753,"line_start":12,"line_end":17,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    const z: &'static isize = {","highlight_start":5,"highlight_end":32},{"text":"        //~^ ERROR blocks in constants are limited to items and tail expressions","highlight_start":1,"highlight_end":81},{"text":"        let p = 3;","highlight_start":1,"highlight_end":19},{"text":"        //~^ ERROR blocks in constants are limited to items and tail expressions","highlight_start":1,"highlight_end":81},{"text":"        &p //~ ERROR `p` does not live long enough","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0016]: blocks in constants are limited to items and tail expressions\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/issue-18118.rs:12:5\n   |\n12 | /     const z: &'static isize = {\n13 | |         //~^ ERROR blocks in constants are limited to items and tail expressions\n14 | |         let p = 3;\n15 | |         //~^ ERROR blocks in constants are limited to items and tail expressions\n16 | |         &p //~ ERROR `p` does not live long enough\n17 | |     };\n   | |______^\n\n"}
{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-18118.rs","byte_start":608,"byte_end":609,"line_start":14,"line_end":14,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"        let p = 3;","highlight_start":13,"highlight_end":14}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-18118.rs","byte_start":752,"byte_end":752,"line_start":17,"line_end":17,"column_start":6,"column_end":6,"is_primary":true,"text":[{"text":"    };","highlight_start":6,"highlight_end":6}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/issue-18118.rs","byte_start":752,"byte_end":753,"line_start":17,"line_end":17,"column_start":6,"column_end":7,"is_primary":false,"text":[{"text":"    };","highlight_start":6,"highlight_end":7}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/issue-18118.rs:17:6\n   |\n14 |         let p = 3;\n   |             - temporary value created here\n...\n17 |     };\n   |      -\n   |      |\n   |      temporary value dropped here while still borrowed\n   |      temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 3 previous errors\n\n"}
