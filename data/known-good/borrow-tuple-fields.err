{"message":"cannot move out of `x` because it is borrowed","code":{"code":"E0505","explanation":"\nA value was moved out while it was still borrowed.\n\nErroneous code example:\n\n```compile_fail,E0505\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(x);\n    }\n}\n```\n\nHere, the function `eat` takes the ownership of `x`. However,\n`x` cannot be moved because it was borrowed to `_ref_to_val`.\nTo fix that you can do few different things:\n\n* Try to avoid moving the variable.\n* Release borrow before move.\n* Implement the `Copy` trait on the type.\n\nExamples:\n\n```\nstruct Value {}\n\nfn eat(val: &Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(&x); // pass by reference, if it's possible\n    }\n}\n```\n\nOr:\n\n```\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n    }\n    eat(x); // release borrow and then move it.\n}\n```\n\nOr:\n\n```\n#[derive(Clone, Copy)] // implement Copy trait\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(x); // it will be copied here.\n    }\n}\n```\n\nYou can find more information about borrowing in the rust-book:\nhttp://doc.rust-lang.org/stable/book/references-and-borrowing.html\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs","byte_start":612,"byte_end":616,"line_start":19,"line_end":19,"column_start":13,"column_end":17,"is_primary":false,"text":[{"text":"    let r = &x.0;","highlight_start":13,"highlight_end":17}],"label":"borrow of `x.0` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs","byte_start":630,"byte_end":631,"line_start":20,"line_end":20,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"    let y = x; //~ ERROR cannot move out of `x` because it is borrowed","highlight_start":13,"highlight_end":14}],"label":"move out of `x` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0505]: cannot move out of `x` because it is borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs:20:13\n   |\n19 |     let r = &x.0;\n   |             ---- borrow of `x.0` occurs here\n20 |     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n   |             ^ move out of `x` occurs here\n\n"}
{"message":"cannot borrow `x.0` as mutable because it is also borrowed as immutable","code":{"code":"E0502","explanation":"\nThis error indicates that you are trying to borrow a variable as mutable when it\nhas already been borrowed as immutable.\n\nExample of erroneous code:\n\n```compile_fail,E0502\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    let ref y = a; // a is borrowed as immutable.\n    bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed\n            //        as immutable\n}\n```\n\nTo fix this error, ensure that you don't have any other references to the\nvariable before trying to access it mutably:\n\n```\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    bar(a);\n    let ref y = a; // ok!\n}\n```\n\nFor more information on the rust ownership system, take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html.\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs","byte_start":744,"byte_end":752,"line_start":24,"line_end":24,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"    let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as","highlight_start":13,"highlight_end":21}],"label":"mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs","byte_start":726,"byte_end":730,"line_start":23,"line_end":23,"column_start":13,"column_end":17,"is_primary":false,"text":[{"text":"    let a = &x.0;","highlight_start":13,"highlight_end":17}],"label":"immutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs","byte_start":1357,"byte_end":1358,"line_start":42,"line_end":42,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"immutable borrow ends here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immutable\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs:24:13\n   |\n23 |     let a = &x.0;\n   |             ---- immutable borrow occurs here\n24 |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n   |             ^^^^^^^^ mutable borrow occurs here\n...\n42 | }\n   | - immutable borrow ends here\n\n"}
{"message":"cannot borrow `x.0` as mutable more than once at a time","code":{"code":"E0499","explanation":"\nA variable was borrowed as mutable more than once. Erroneous code example:\n\n```compile_fail,E0499\nlet mut i = 0;\nlet mut x = &mut i;\nlet mut a = &mut i;\n// error: cannot borrow `i` as mutable more than once at a time\n```\n\nPlease note that in rust, you can either have many immutable references, or one\nmutable reference. Take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html for more\ninformation. Example:\n\n\n```\nlet mut i = 0;\nlet mut x = &mut i; // ok!\n\n// or:\nlet mut i = 0;\nlet a = &i; // ok!\nlet b = &i; // still ok!\nlet c = &i; // still ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs","byte_start":863,"byte_end":871,"line_start":27,"line_end":27,"column_start":13,"column_end":21,"is_primary":false,"text":[{"text":"    let a = &mut x.0;","highlight_start":13,"highlight_end":21}],"label":"first mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs","byte_start":885,"byte_end":893,"line_start":28,"line_end":28,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"    let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time","highlight_start":13,"highlight_end":21}],"label":"second mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs","byte_start":1357,"byte_end":1358,"line_start":42,"line_end":42,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"first borrow ends here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs:28:13\n   |\n27 |     let a = &mut x.0;\n   |             -------- first mutable borrow occurs here\n28 |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n   |             ^^^^^^^^ second mutable borrow occurs here\n...\n42 | }\n   | - first borrow ends here\n\n"}
{"message":"cannot move out of `x` because it is borrowed","code":{"code":"E0505","explanation":"\nA value was moved out while it was still borrowed.\n\nErroneous code example:\n\n```compile_fail,E0505\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(x);\n    }\n}\n```\n\nHere, the function `eat` takes the ownership of `x`. However,\n`x` cannot be moved because it was borrowed to `_ref_to_val`.\nTo fix that you can do few different things:\n\n* Try to avoid moving the variable.\n* Release borrow before move.\n* Implement the `Copy` trait on the type.\n\nExamples:\n\n```\nstruct Value {}\n\nfn eat(val: &Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(&x); // pass by reference, if it's possible\n    }\n}\n```\n\nOr:\n\n```\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n    }\n    eat(x); // release borrow and then move it.\n}\n```\n\nOr:\n\n```\n#[derive(Clone, Copy)] // implement Copy trait\nstruct Value {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    {\n        let _ref_to_val: &Value = &x;\n        eat(x); // it will be copied here.\n    }\n}\n```\n\nYou can find more information about borrowing in the rust-book:\nhttp://doc.rust-lang.org/stable/book/references-and-borrowing.html\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs","byte_start":1002,"byte_end":1006,"line_start":32,"line_end":32,"column_start":13,"column_end":17,"is_primary":false,"text":[{"text":"    let r = &x.0;","highlight_start":13,"highlight_end":17}],"label":"borrow of `x.0` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs","byte_start":1020,"byte_end":1021,"line_start":33,"line_end":33,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"    let y = x; //~ ERROR cannot move out of `x` because it is borrowed","highlight_start":13,"highlight_end":14}],"label":"move out of `x` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0505]: cannot move out of `x` because it is borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs:33:13\n   |\n32 |     let r = &x.0;\n   |             ---- borrow of `x.0` occurs here\n33 |     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n   |             ^ move out of `x` occurs here\n\n"}
{"message":"cannot borrow `x.0` as mutable because it is also borrowed as immutable","code":{"code":"E0502","explanation":"\nThis error indicates that you are trying to borrow a variable as mutable when it\nhas already been borrowed as immutable.\n\nExample of erroneous code:\n\n```compile_fail,E0502\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    let ref y = a; // a is borrowed as immutable.\n    bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed\n            //        as immutable\n}\n```\n\nTo fix this error, ensure that you don't have any other references to the\nvariable before trying to access it mutably:\n\n```\nfn bar(x: &mut i32) {}\nfn foo(a: &mut i32) {\n    bar(a);\n    let ref y = a; // ok!\n}\n```\n\nFor more information on the rust ownership system, take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html.\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs","byte_start":1137,"byte_end":1145,"line_start":37,"line_end":37,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"    let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as","highlight_start":13,"highlight_end":21}],"label":"mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs","byte_start":1119,"byte_end":1123,"line_start":36,"line_end":36,"column_start":13,"column_end":17,"is_primary":false,"text":[{"text":"    let a = &x.0;","highlight_start":13,"highlight_end":17}],"label":"immutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs","byte_start":1357,"byte_end":1358,"line_start":42,"line_end":42,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"immutable borrow ends here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immutable\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs:37:13\n   |\n36 |     let a = &x.0;\n   |             ---- immutable borrow occurs here\n37 |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n   |             ^^^^^^^^ mutable borrow occurs here\n...\n42 | }\n   | - immutable borrow ends here\n\n"}
{"message":"cannot borrow `x.0` as mutable more than once at a time","code":{"code":"E0499","explanation":"\nA variable was borrowed as mutable more than once. Erroneous code example:\n\n```compile_fail,E0499\nlet mut i = 0;\nlet mut x = &mut i;\nlet mut a = &mut i;\n// error: cannot borrow `i` as mutable more than once at a time\n```\n\nPlease note that in rust, you can either have many immutable references, or one\nmutable reference. Take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html for more\ninformation. Example:\n\n\n```\nlet mut i = 0;\nlet mut x = &mut i; // ok!\n\n// or:\nlet mut i = 0;\nlet a = &i; // ok!\nlet b = &i; // still ok!\nlet c = &i; // still ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs","byte_start":1259,"byte_end":1267,"line_start":40,"line_end":40,"column_start":13,"column_end":21,"is_primary":false,"text":[{"text":"    let a = &mut x.0;","highlight_start":13,"highlight_end":21}],"label":"first mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs","byte_start":1281,"byte_end":1289,"line_start":41,"line_end":41,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"    let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time","highlight_start":13,"highlight_end":21}],"label":"second mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs","byte_start":1357,"byte_end":1358,"line_start":42,"line_end":42,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"first borrow ends here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/borrow-tuple-fields.rs:41:13\n   |\n40 |     let a = &mut x.0;\n   |             -------- first mutable borrow occurs here\n41 |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n   |             ^^^^^^^^ second mutable borrow occurs here\n42 | }\n   | - first borrow ends here\n\n"}
{"message":"aborting due to 6 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 6 previous errors\n\n"}
