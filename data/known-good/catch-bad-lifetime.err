{"message":"borrowed value does not live long enough","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/catch-bad-lifetime.rs","byte_start":799,"byte_end":808,"line_start":19,"line_end":19,"column_start":17,"column_end":26,"is_primary":false,"text":[{"text":"            let my_string = String::from(\"\");","highlight_start":17,"highlight_end":26}],"label":"temporary value created here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/catch-bad-lifetime.rs","byte_start":952,"byte_end":952,"line_start":24,"line_end":24,"column_start":10,"column_end":10,"is_primary":true,"text":[{"text":"        }; //~ ERROR `my_string` does not live long enough","highlight_start":10,"highlight_end":10}],"label":"temporary value dropped here while still borrowed","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/catch-bad-lifetime.rs","byte_start":1006,"byte_end":1007,"line_start":25,"line_end":25,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    }","highlight_start":5,"highlight_end":6}],"label":"temporary value needs to live until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"consider using a `let` binding to increase its lifetime","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error[E0597]: borrowed value does not live long enough\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/catch-bad-lifetime.rs:24:10\n   |\n19 |             let my_string = String::from(\"\");\n   |                 --------- temporary value created here\n...\n24 |         }; //~ ERROR `my_string` does not live long enough\n   |          ^ temporary value dropped here while still borrowed\n25 |     }\n   |     - temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n\n"}
{"message":"use of possibly uninitialized variable: `k`","code":{"code":"E0381","explanation":"\nIt is not allowed to use or capture an uninitialized variable. For example:\n\n```compile_fail,E0381\nfn main() {\n    let x: i32;\n    let y = x; // error, use of possibly uninitialized variable\n}\n```\n\nTo fix this, ensure that any declared variables are initialized before being\nused. Example:\n\n```\nfn main() {\n    let x: i32 = 0;\n    let y = x; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/catch-bad-lifetime.rs","byte_start":1344,"byte_end":1345,"line_start":36,"line_end":36,"column_start":26,"column_end":27,"is_primary":true,"text":[{"text":"        ::std::mem::drop(k); //~ ERROR use of moved value: `k`","highlight_start":26,"highlight_end":27}],"label":"use of possibly uninitialized `k`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0381]: use of possibly uninitialized variable: `k`\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/catch-bad-lifetime.rs:36:26\n   |\n36 |         ::std::mem::drop(k); //~ ERROR use of moved value: `k`\n   |                          ^ use of possibly uninitialized `k`\n\n"}
{"message":"cannot assign to `i` because it is borrowed","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/catch-bad-lifetime.rs","byte_start":1132,"byte_end":1138,"line_start":30,"line_end":30,"column_start":17,"column_end":23,"is_primary":false,"text":[{"text":"        let k = &mut i;","highlight_start":17,"highlight_end":23}],"label":"borrow of `i` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/catch-bad-lifetime.rs","byte_start":1227,"byte_end":1233,"line_start":33,"line_end":33,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"            i = 10; //~ ERROR cannot assign to `i` because it is borrowed","highlight_start":13,"highlight_end":19}],"label":"assignment to borrowed `i` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0506]: cannot assign to `i` because it is borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/catch-bad-lifetime.rs:33:13\n   |\n30 |         let k = &mut i;\n   |                 ------ borrow of `i` occurs here\n...\n33 |             i = 10; //~ ERROR cannot assign to `i` because it is borrowed\n   |             ^^^^^^ assignment to borrowed `i` occurs here\n\n"}
{"message":"cannot assign to `i` because it is borrowed","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/catch-bad-lifetime.rs","byte_start":1132,"byte_end":1138,"line_start":30,"line_end":30,"column_start":17,"column_end":23,"is_primary":false,"text":[{"text":"        let k = &mut i;","highlight_start":17,"highlight_end":23}],"label":"borrow of `i` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-master/src/test/compile-fail/catch-bad-lifetime.rs","byte_start":1390,"byte_end":1396,"line_start":37,"line_end":37,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        i = 40; //~ ERROR cannot assign to `i` because it is borrowed","highlight_start":9,"highlight_end":15}],"label":"assignment to borrowed `i` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0506]: cannot assign to `i` because it is borrowed\n  --> /home/ariel/Rust/rust-master/src/test/compile-fail/catch-bad-lifetime.rs:37:9\n   |\n30 |         let k = &mut i;\n   |                 ------ borrow of `i` occurs here\n...\n37 |         i = 40; //~ ERROR cannot assign to `i` because it is borrowed\n   |         ^^^^^^ assignment to borrowed `i` occurs here\n\n"}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 4 previous errors\n\n"}
