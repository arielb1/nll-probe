{"message":"`f1` does not live long enough (Ast)","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":773,"byte_end":775,"line_start":26,"line_end":26,"column_start":33,"column_end":35,"is_primary":true,"text":[{"text":"    let f2: &Fat<[isize; 3]> = &f1; //~ ERROR `f1` does not live long enough","highlight_start":33,"highlight_end":35}],"label":"does not live long enough","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":1322,"byte_end":1323,"line_start":43,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"borrowed value only lives until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"borrowed value must be valid for the lifetime 'a as defined on the function body at 23:1...","code":null,"level":"note","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":662,"byte_end":1323,"line_start":23,"line_end":43,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn baz<'a>() {","highlight_start":1,"highlight_end":15},{"text":"    // With a vec of ints.","highlight_start":1,"highlight_end":27},{"text":"    let f1 = Fat { ptr: [1, 2, 3] };","highlight_start":1,"highlight_end":37},{"text":"    let f2: &Fat<[isize; 3]> = &f1; //~ ERROR `f1` does not live long enough","highlight_start":1,"highlight_end":77},{"text":"    let f3: &'a Fat<[isize]> = f2;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // With a trait.","highlight_start":1,"highlight_end":21},{"text":"    let f1 = Fat { ptr: Foo };","highlight_start":1,"highlight_end":31},{"text":"    let f2: &Fat<Foo> = &f1; //~ ERROR `f1` does not live long enough","highlight_start":1,"highlight_end":70},{"text":"    let f3: &'a Fat<Bar> = f2;","highlight_start":1,"highlight_end":31},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Tuple with a vec of ints.","highlight_start":1,"highlight_end":33},{"text":"    let f1 = ([1, 2, 3],);","highlight_start":1,"highlight_end":27},{"text":"    let f2: &([isize; 3],) = &f1; //~ ERROR `f1` does not live long enough","highlight_start":1,"highlight_end":75},{"text":"    let f3: &'a ([isize],) = f2;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Tuple with a trait.","highlight_start":1,"highlight_end":27},{"text":"    let f1 = (Foo,);","highlight_start":1,"highlight_end":21},{"text":"    let f2: &(Foo,) = &f1; //~ ERROR `f1` does not live long enough","highlight_start":1,"highlight_end":68},{"text":"    let f3: &'a (Bar,) = f2;","highlight_start":1,"highlight_end":29},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}],"rendered":null}
{"message":"`f1` does not live long enough (Ast)","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":931,"byte_end":933,"line_start":31,"line_end":31,"column_start":26,"column_end":28,"is_primary":true,"text":[{"text":"    let f2: &Fat<Foo> = &f1; //~ ERROR `f1` does not live long enough","highlight_start":26,"highlight_end":28}],"label":"does not live long enough","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":1322,"byte_end":1323,"line_start":43,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"borrowed value only lives until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"borrowed value must be valid for the lifetime 'a as defined on the function body at 23:1...","code":null,"level":"note","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":662,"byte_end":1323,"line_start":23,"line_end":43,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn baz<'a>() {","highlight_start":1,"highlight_end":15},{"text":"    // With a vec of ints.","highlight_start":1,"highlight_end":27},{"text":"    let f1 = Fat { ptr: [1, 2, 3] };","highlight_start":1,"highlight_end":37},{"text":"    let f2: &Fat<[isize; 3]> = &f1; //~ ERROR `f1` does not live long enough","highlight_start":1,"highlight_end":77},{"text":"    let f3: &'a Fat<[isize]> = f2;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // With a trait.","highlight_start":1,"highlight_end":21},{"text":"    let f1 = Fat { ptr: Foo };","highlight_start":1,"highlight_end":31},{"text":"    let f2: &Fat<Foo> = &f1; //~ ERROR `f1` does not live long enough","highlight_start":1,"highlight_end":70},{"text":"    let f3: &'a Fat<Bar> = f2;","highlight_start":1,"highlight_end":31},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Tuple with a vec of ints.","highlight_start":1,"highlight_end":33},{"text":"    let f1 = ([1, 2, 3],);","highlight_start":1,"highlight_end":27},{"text":"    let f2: &([isize; 3],) = &f1; //~ ERROR `f1` does not live long enough","highlight_start":1,"highlight_end":75},{"text":"    let f3: &'a ([isize],) = f2;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Tuple with a trait.","highlight_start":1,"highlight_end":27},{"text":"    let f1 = (Foo,);","highlight_start":1,"highlight_end":21},{"text":"    let f2: &(Foo,) = &f1; //~ ERROR `f1` does not live long enough","highlight_start":1,"highlight_end":68},{"text":"    let f3: &'a (Bar,) = f2;","highlight_start":1,"highlight_end":29},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}],"rendered":null}
{"message":"`f1` does not live long enough (Ast)","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":1098,"byte_end":1100,"line_start":36,"line_end":36,"column_start":31,"column_end":33,"is_primary":true,"text":[{"text":"    let f2: &([isize; 3],) = &f1; //~ ERROR `f1` does not live long enough","highlight_start":31,"highlight_end":33}],"label":"does not live long enough","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":1322,"byte_end":1323,"line_start":43,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"borrowed value only lives until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"borrowed value must be valid for the lifetime 'a as defined on the function body at 23:1...","code":null,"level":"note","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":662,"byte_end":1323,"line_start":23,"line_end":43,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn baz<'a>() {","highlight_start":1,"highlight_end":15},{"text":"    // With a vec of ints.","highlight_start":1,"highlight_end":27},{"text":"    let f1 = Fat { ptr: [1, 2, 3] };","highlight_start":1,"highlight_end":37},{"text":"    let f2: &Fat<[isize; 3]> = &f1; //~ ERROR `f1` does not live long enough","highlight_start":1,"highlight_end":77},{"text":"    let f3: &'a Fat<[isize]> = f2;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // With a trait.","highlight_start":1,"highlight_end":21},{"text":"    let f1 = Fat { ptr: Foo };","highlight_start":1,"highlight_end":31},{"text":"    let f2: &Fat<Foo> = &f1; //~ ERROR `f1` does not live long enough","highlight_start":1,"highlight_end":70},{"text":"    let f3: &'a Fat<Bar> = f2;","highlight_start":1,"highlight_end":31},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Tuple with a vec of ints.","highlight_start":1,"highlight_end":33},{"text":"    let f1 = ([1, 2, 3],);","highlight_start":1,"highlight_end":27},{"text":"    let f2: &([isize; 3],) = &f1; //~ ERROR `f1` does not live long enough","highlight_start":1,"highlight_end":75},{"text":"    let f3: &'a ([isize],) = f2;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Tuple with a trait.","highlight_start":1,"highlight_end":27},{"text":"    let f1 = (Foo,);","highlight_start":1,"highlight_end":21},{"text":"    let f2: &(Foo,) = &f1; //~ ERROR `f1` does not live long enough","highlight_start":1,"highlight_end":68},{"text":"    let f3: &'a (Bar,) = f2;","highlight_start":1,"highlight_end":29},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}],"rendered":null}
{"message":"`f1` does not live long enough (Ast)","code":{"code":"E0597","explanation":"\nThis error occurs because a borrow was made inside a variable which has a\ngreater lifetime than the borrowed one.\n\nExample of erroneous code:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\nlet y = 0;\nx.x = Some(&y); // error: `y` does not live long enough\n```\n\nIn here, `x` is created before `y` and therefore has a greater lifetime. Always\nkeep in mind that values in a scope are dropped in the opposite order they are\ncreated. So to fix the previous example, just make the `y` lifetime greater than\nthe `x`'s one:\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet y = 0;\nlet mut x = Foo { x: None };\nx.x = Some(&y);\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":1248,"byte_end":1250,"line_start":41,"line_end":41,"column_start":24,"column_end":26,"is_primary":true,"text":[{"text":"    let f2: &(Foo,) = &f1; //~ ERROR `f1` does not live long enough","highlight_start":24,"highlight_end":26}],"label":"does not live long enough","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":1322,"byte_end":1323,"line_start":43,"line_end":43,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"borrowed value only lives until here","suggested_replacement":null,"expansion":null}],"children":[{"message":"borrowed value must be valid for the lifetime 'a as defined on the function body at 23:1...","code":null,"level":"note","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":662,"byte_end":1323,"line_start":23,"line_end":43,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn baz<'a>() {","highlight_start":1,"highlight_end":15},{"text":"    // With a vec of ints.","highlight_start":1,"highlight_end":27},{"text":"    let f1 = Fat { ptr: [1, 2, 3] };","highlight_start":1,"highlight_end":37},{"text":"    let f2: &Fat<[isize; 3]> = &f1; //~ ERROR `f1` does not live long enough","highlight_start":1,"highlight_end":77},{"text":"    let f3: &'a Fat<[isize]> = f2;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // With a trait.","highlight_start":1,"highlight_end":21},{"text":"    let f1 = Fat { ptr: Foo };","highlight_start":1,"highlight_end":31},{"text":"    let f2: &Fat<Foo> = &f1; //~ ERROR `f1` does not live long enough","highlight_start":1,"highlight_end":70},{"text":"    let f3: &'a Fat<Bar> = f2;","highlight_start":1,"highlight_end":31},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Tuple with a vec of ints.","highlight_start":1,"highlight_end":33},{"text":"    let f1 = ([1, 2, 3],);","highlight_start":1,"highlight_end":27},{"text":"    let f2: &([isize; 3],) = &f1; //~ ERROR `f1` does not live long enough","highlight_start":1,"highlight_end":75},{"text":"    let f3: &'a ([isize],) = f2;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Tuple with a trait.","highlight_start":1,"highlight_end":27},{"text":"    let f1 = (Foo,);","highlight_start":1,"highlight_end":21},{"text":"    let f2: &(Foo,) = &f1; //~ ERROR `f1` does not live long enough","highlight_start":1,"highlight_end":68},{"text":"    let f3: &'a (Bar,) = f2;","highlight_start":1,"highlight_end":29},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}],"rendered":null}
{"message":"cannot assign to `f1` because it is borrowed (Mir)","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":1247,"byte_end":1250,"line_start":41,"line_end":41,"column_start":23,"column_end":26,"is_primary":false,"text":[{"text":"    let f2: &(Foo,) = &f1; //~ ERROR `f1` does not live long enough","highlight_start":23,"highlight_end":26}],"label":"borrow of `f1` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":1323,"byte_end":1323,"line_start":43,"line_end":43,"column_start":2,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":2,"highlight_end":2}],"label":"assignment to borrowed `f1` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot assign to `f1` because it is borrowed (Mir)","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":1097,"byte_end":1100,"line_start":36,"line_end":36,"column_start":30,"column_end":33,"is_primary":false,"text":[{"text":"    let f2: &([isize; 3],) = &f1; //~ ERROR `f1` does not live long enough","highlight_start":30,"highlight_end":33}],"label":"borrow of `f1` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":1323,"byte_end":1323,"line_start":43,"line_end":43,"column_start":2,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":2,"highlight_end":2}],"label":"assignment to borrowed `f1` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot assign to `f1` because it is borrowed (Mir)","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":930,"byte_end":933,"line_start":31,"line_end":31,"column_start":25,"column_end":28,"is_primary":false,"text":[{"text":"    let f2: &Fat<Foo> = &f1; //~ ERROR `f1` does not live long enough","highlight_start":25,"highlight_end":28}],"label":"borrow of `f1` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":1323,"byte_end":1323,"line_start":43,"line_end":43,"column_start":2,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":2,"highlight_end":2}],"label":"assignment to borrowed `f1` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"cannot assign to `f1` because it is borrowed (Mir)","code":{"code":"E0506","explanation":"\nThis error occurs when an attempt is made to assign to a borrowed value.\n\nExample of erroneous code:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let fancy_ref = &fancy_num;\n    fancy_num = FancyNum { num: 6 };\n    // error: cannot assign to `fancy_num` because it is borrowed\n\n    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n}\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n    let moved_num = fancy_num;\n    fancy_num = FancyNum { num: 6 };\n\n    println!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n}\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    {\n        let fancy_ref = &fancy_num;\n        println!(\"Ref: {}\", fancy_ref.num);\n    }\n\n    // Works because `fancy_ref` is no longer in scope\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn main() {\n    let mut fancy_num = FancyNum { num: 5 };\n\n    print_fancy_ref(&fancy_num);\n\n    // Works because function borrow has ended\n    fancy_num = FancyNum { num: 6 };\n    println!(\"Num: {}\", fancy_num.num);\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":772,"byte_end":775,"line_start":26,"line_end":26,"column_start":32,"column_end":35,"is_primary":false,"text":[{"text":"    let f2: &Fat<[isize; 3]> = &f1; //~ ERROR `f1` does not live long enough","highlight_start":32,"highlight_end":35}],"label":"borrow of `f1` occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/dst-bad-coerce3.rs","byte_start":1323,"byte_end":1323,"line_start":43,"line_end":43,"column_start":2,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":2,"highlight_end":2}],"label":"assignment to borrowed `f1` occurs here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"aborting due to 8 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":null}
