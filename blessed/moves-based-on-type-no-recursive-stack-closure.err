{"message":"cannot borrow `*f` as mutable more than once at a time (Ast)","code":{"code":"E0499","explanation":"\nA variable was borrowed as mutable more than once. Erroneous code example:\n\n```compile_fail,E0499\nlet mut i = 0;\nlet mut x = &mut i;\nlet mut a = &mut i;\n// error: cannot borrow `i` as mutable more than once at a time\n```\n\nPlease note that in rust, you can either have many immutable references, or one\nmutable reference. Take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html for more\ninformation. Example:\n\n\n```\nlet mut i = 0;\nlet mut x = &mut i; // ok!\n\n// or:\nlet mut i = 0;\nlet a = &i; // ok!\nlet b = &i; // still ok!\nlet c = &i; // still ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs","byte_start":1103,"byte_end":1108,"line_start":30,"line_end":30,"column_start":21,"column_end":26,"is_primary":false,"text":[{"text":"                    (f.c)(f, true);","highlight_start":21,"highlight_end":26}],"label":"first mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs","byte_start":1109,"byte_end":1110,"line_start":30,"line_end":30,"column_start":27,"column_end":28,"is_primary":true,"text":[{"text":"                    (f.c)(f, true);","highlight_start":27,"highlight_end":28}],"label":"second mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs","byte_start":1116,"byte_end":1117,"line_start":30,"line_end":30,"column_start":34,"column_end":35,"is_primary":false,"text":[{"text":"                    (f.c)(f, true);","highlight_start":34,"highlight_end":35}],"label":"first borrow ends here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"use of moved value: `f` (Ast)","code":{"code":"E0382","explanation":"\nThis error occurs when an attempt is made to use a variable after its contents\nhave been moved elsewhere. For example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nIf we own the type, the easiest way to address this problem is to implement\n`Copy` and `Clone` on it, as shown below. This allows `y` to copy the\ninformation in `x`, while leaving the original version owned by `x`. Subsequent\nchanges to `x` will not be reflected when accessing `y`.\n\n```\n#[derive(Copy, Clone)]\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the chapter in the\nBook:\n\nhttps://doc.rust-lang.org/book/first-edition/ownership.html\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs","byte_start":1439,"byte_end":1440,"line_start":42,"line_end":42,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    f(&mut r, false) //~ ERROR use of moved value","highlight_start":5,"highlight_end":6}],"label":"value used here after move","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs","byte_start":1430,"byte_end":1431,"line_start":41,"line_end":41,"column_start":32,"column_end":33,"is_primary":false,"text":[{"text":"    let mut r = R {c: Box::new(f)};","highlight_start":32,"highlight_end":33}],"label":"value moved here","suggested_replacement":null,"expansion":null}],"children":[{"message":"move occurs because `f` has type `F`, which does not implement the `Copy` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":null}
{"message":"cannot borrow `(*f)` as mutable more than once at a time (Mir)","code":{"code":"E0499","explanation":"\nA variable was borrowed as mutable more than once. Erroneous code example:\n\n```compile_fail,E0499\nlet mut i = 0;\nlet mut x = &mut i;\nlet mut a = &mut i;\n// error: cannot borrow `i` as mutable more than once at a time\n```\n\nPlease note that in rust, you can either have many immutable references, or one\nmutable reference. Take a look at\nhttps://doc.rust-lang.org/stable/book/references-and-borrowing.html for more\ninformation. Example:\n\n\n```\nlet mut i = 0;\nlet mut x = &mut i; // ok!\n\n// or:\nlet mut i = 0;\nlet a = &i; // ok!\nlet b = &i; // still ok!\nlet c = &i; // still ok!\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs","byte_start":1103,"byte_end":1108,"line_start":30,"line_end":30,"column_start":21,"column_end":26,"is_primary":false,"text":[{"text":"                    (f.c)(f, true);","highlight_start":21,"highlight_end":26}],"label":"first mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs","byte_start":1109,"byte_end":1110,"line_start":30,"line_end":30,"column_start":27,"column_end":28,"is_primary":true,"text":[{"text":"                    (f.c)(f, true);","highlight_start":27,"highlight_end":28}],"label":"second mutable borrow occurs here","suggested_replacement":null,"expansion":null},{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs","byte_start":1116,"byte_end":1117,"line_start":30,"line_end":30,"column_start":34,"column_end":35,"is_primary":false,"text":[{"text":"                    (f.c)(f, true);","highlight_start":34,"highlight_end":35}],"label":"first borrow ends here","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"borrow of possibly uninitialized variable: `f` (Mir)","code":{"code":"E0381","explanation":"\nIt is not allowed to use or capture an uninitialized variable. For example:\n\n```compile_fail,E0381\nfn main() {\n    let x: i32;\n    let y = x; // error, use of possibly uninitialized variable\n}\n```\n\nTo fix this, ensure that any declared variables are initialized before being\nused. Example:\n\n```\nfn main() {\n    let x: i32 = 0;\n    let y = x; // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/ariel/Rust/rust-emergency/src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs","byte_start":1439,"byte_end":1440,"line_start":42,"line_end":42,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    f(&mut r, false) //~ ERROR use of moved value","highlight_start":5,"highlight_end":6}],"label":"use of possibly uninitialized `f`","suggested_replacement":null,"expansion":null}],"children":[],"rendered":null}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":null}
